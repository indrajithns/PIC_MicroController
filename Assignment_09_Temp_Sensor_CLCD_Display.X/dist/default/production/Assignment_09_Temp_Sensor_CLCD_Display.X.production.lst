

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Dec 25 20:12:47 2024

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     9                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=1
    18                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=1
    19                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=1
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22     0000                     
    23                           ; Version 2.20
    24                           ; Generated 12/02/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57     0004                     fsr             equ	4
    58     0004                     fsr0            equ	4
    59     0000                     indf            equ	0
    60     0000                     indf0           equ	0
    61     0002                     pc              equ	2
    62     0002                     pcl             equ	2
    63     000A                     pclath          equ	10
    64     0003                     status          equ	3
    65     0000                     INDF            equ	0	;# 
    66     0001                     TMR0            equ	1	;# 
    67     0002                     PCL             equ	2	;# 
    68     0003                     STATUS          equ	3	;# 
    69     0004                     FSR             equ	4	;# 
    70     0005                     PORTA           equ	5	;# 
    71     0006                     PORTB           equ	6	;# 
    72     0007                     PORTC           equ	7	;# 
    73     0008                     PORTD           equ	8	;# 
    74     0009                     PORTE           equ	9	;# 
    75     000A                     PCLATH          equ	10	;# 
    76     000B                     INTCON          equ	11	;# 
    77     000C                     PIR1            equ	12	;# 
    78     000D                     PIR2            equ	13	;# 
    79     000E                     TMR1            equ	14	;# 
    80     000E                     TMR1L           equ	14	;# 
    81     000F                     TMR1H           equ	15	;# 
    82     0010                     T1CON           equ	16	;# 
    83     0011                     TMR2            equ	17	;# 
    84     0012                     T2CON           equ	18	;# 
    85     0013                     SSPBUF          equ	19	;# 
    86     0014                     SSPCON          equ	20	;# 
    87     0015                     CCPR1           equ	21	;# 
    88     0015                     CCPR1L          equ	21	;# 
    89     0016                     CCPR1H          equ	22	;# 
    90     0017                     CCP1CON         equ	23	;# 
    91     0018                     RCSTA           equ	24	;# 
    92     0019                     TXREG           equ	25	;# 
    93     001A                     RCREG           equ	26	;# 
    94     001B                     CCPR2           equ	27	;# 
    95     001B                     CCPR2L          equ	27	;# 
    96     001C                     CCPR2H          equ	28	;# 
    97     001D                     CCP2CON         equ	29	;# 
    98     001E                     ADRESH          equ	30	;# 
    99     001F                     ADCON0          equ	31	;# 
   100     0081                     OPTION_REG      equ	129	;# 
   101     0085                     TRISA           equ	133	;# 
   102     0086                     TRISB           equ	134	;# 
   103     0087                     TRISC           equ	135	;# 
   104     0088                     TRISD           equ	136	;# 
   105     0089                     TRISE           equ	137	;# 
   106     008C                     PIE1            equ	140	;# 
   107     008D                     PIE2            equ	141	;# 
   108     008E                     PCON            equ	142	;# 
   109     0091                     SSPCON2         equ	145	;# 
   110     0092                     PR2             equ	146	;# 
   111     0093                     SSPADD          equ	147	;# 
   112     0094                     SSPSTAT         equ	148	;# 
   113     0098                     TXSTA           equ	152	;# 
   114     0099                     SPBRG           equ	153	;# 
   115     009C                     CMCON           equ	156	;# 
   116     009D                     CVRCON          equ	157	;# 
   117     009E                     ADRESL          equ	158	;# 
   118     009F                     ADCON1          equ	159	;# 
   119     010C                     EEDATA          equ	268	;# 
   120     010D                     EEADR           equ	269	;# 
   121     010E                     EEDATH          equ	270	;# 
   122     010F                     EEADRH          equ	271	;# 
   123     018C                     EECON1          equ	396	;# 
   124     018D                     EECON2          equ	397	;# 
   125     0000                     INDF            equ	0	;# 
   126     0001                     TMR0            equ	1	;# 
   127     0002                     PCL             equ	2	;# 
   128     0003                     STATUS          equ	3	;# 
   129     0004                     FSR             equ	4	;# 
   130     0005                     PORTA           equ	5	;# 
   131     0006                     PORTB           equ	6	;# 
   132     0007                     PORTC           equ	7	;# 
   133     0008                     PORTD           equ	8	;# 
   134     0009                     PORTE           equ	9	;# 
   135     000A                     PCLATH          equ	10	;# 
   136     000B                     INTCON          equ	11	;# 
   137     000C                     PIR1            equ	12	;# 
   138     000D                     PIR2            equ	13	;# 
   139     000E                     TMR1            equ	14	;# 
   140     000E                     TMR1L           equ	14	;# 
   141     000F                     TMR1H           equ	15	;# 
   142     0010                     T1CON           equ	16	;# 
   143     0011                     TMR2            equ	17	;# 
   144     0012                     T2CON           equ	18	;# 
   145     0013                     SSPBUF          equ	19	;# 
   146     0014                     SSPCON          equ	20	;# 
   147     0015                     CCPR1           equ	21	;# 
   148     0015                     CCPR1L          equ	21	;# 
   149     0016                     CCPR1H          equ	22	;# 
   150     0017                     CCP1CON         equ	23	;# 
   151     0018                     RCSTA           equ	24	;# 
   152     0019                     TXREG           equ	25	;# 
   153     001A                     RCREG           equ	26	;# 
   154     001B                     CCPR2           equ	27	;# 
   155     001B                     CCPR2L          equ	27	;# 
   156     001C                     CCPR2H          equ	28	;# 
   157     001D                     CCP2CON         equ	29	;# 
   158     001E                     ADRESH          equ	30	;# 
   159     001F                     ADCON0          equ	31	;# 
   160     0081                     OPTION_REG      equ	129	;# 
   161     0085                     TRISA           equ	133	;# 
   162     0086                     TRISB           equ	134	;# 
   163     0087                     TRISC           equ	135	;# 
   164     0088                     TRISD           equ	136	;# 
   165     0089                     TRISE           equ	137	;# 
   166     008C                     PIE1            equ	140	;# 
   167     008D                     PIE2            equ	141	;# 
   168     008E                     PCON            equ	142	;# 
   169     0091                     SSPCON2         equ	145	;# 
   170     0092                     PR2             equ	146	;# 
   171     0093                     SSPADD          equ	147	;# 
   172     0094                     SSPSTAT         equ	148	;# 
   173     0098                     TXSTA           equ	152	;# 
   174     0099                     SPBRG           equ	153	;# 
   175     009C                     CMCON           equ	156	;# 
   176     009D                     CVRCON          equ	157	;# 
   177     009E                     ADRESL          equ	158	;# 
   178     009F                     ADCON1          equ	159	;# 
   179     010C                     EEDATA          equ	268	;# 
   180     010D                     EEADR           equ	269	;# 
   181     010E                     EEDATH          equ	270	;# 
   182     010F                     EEADRH          equ	271	;# 
   183     018C                     EECON1          equ	396	;# 
   184     018D                     EECON2          equ	397	;# 
   185     0000                     INDF            equ	0	;# 
   186     0001                     TMR0            equ	1	;# 
   187     0002                     PCL             equ	2	;# 
   188     0003                     STATUS          equ	3	;# 
   189     0004                     FSR             equ	4	;# 
   190     0005                     PORTA           equ	5	;# 
   191     0006                     PORTB           equ	6	;# 
   192     0007                     PORTC           equ	7	;# 
   193     0008                     PORTD           equ	8	;# 
   194     0009                     PORTE           equ	9	;# 
   195     000A                     PCLATH          equ	10	;# 
   196     000B                     INTCON          equ	11	;# 
   197     000C                     PIR1            equ	12	;# 
   198     000D                     PIR2            equ	13	;# 
   199     000E                     TMR1            equ	14	;# 
   200     000E                     TMR1L           equ	14	;# 
   201     000F                     TMR1H           equ	15	;# 
   202     0010                     T1CON           equ	16	;# 
   203     0011                     TMR2            equ	17	;# 
   204     0012                     T2CON           equ	18	;# 
   205     0013                     SSPBUF          equ	19	;# 
   206     0014                     SSPCON          equ	20	;# 
   207     0015                     CCPR1           equ	21	;# 
   208     0015                     CCPR1L          equ	21	;# 
   209     0016                     CCPR1H          equ	22	;# 
   210     0017                     CCP1CON         equ	23	;# 
   211     0018                     RCSTA           equ	24	;# 
   212     0019                     TXREG           equ	25	;# 
   213     001A                     RCREG           equ	26	;# 
   214     001B                     CCPR2           equ	27	;# 
   215     001B                     CCPR2L          equ	27	;# 
   216     001C                     CCPR2H          equ	28	;# 
   217     001D                     CCP2CON         equ	29	;# 
   218     001E                     ADRESH          equ	30	;# 
   219     001F                     ADCON0          equ	31	;# 
   220     0081                     OPTION_REG      equ	129	;# 
   221     0085                     TRISA           equ	133	;# 
   222     0086                     TRISB           equ	134	;# 
   223     0087                     TRISC           equ	135	;# 
   224     0088                     TRISD           equ	136	;# 
   225     0089                     TRISE           equ	137	;# 
   226     008C                     PIE1            equ	140	;# 
   227     008D                     PIE2            equ	141	;# 
   228     008E                     PCON            equ	142	;# 
   229     0091                     SSPCON2         equ	145	;# 
   230     0092                     PR2             equ	146	;# 
   231     0093                     SSPADD          equ	147	;# 
   232     0094                     SSPSTAT         equ	148	;# 
   233     0098                     TXSTA           equ	152	;# 
   234     0099                     SPBRG           equ	153	;# 
   235     009C                     CMCON           equ	156	;# 
   236     009D                     CVRCON          equ	157	;# 
   237     009E                     ADRESL          equ	158	;# 
   238     009F                     ADCON1          equ	159	;# 
   239     010C                     EEDATA          equ	268	;# 
   240     010D                     EEADR           equ	269	;# 
   241     010E                     EEDATH          equ	270	;# 
   242     010F                     EEADRH          equ	271	;# 
   243     018C                     EECON1          equ	396	;# 
   244     018D                     EECON2          equ	397	;# 
   245     0000                     INDF            equ	0	;# 
   246     0001                     TMR0            equ	1	;# 
   247     0002                     PCL             equ	2	;# 
   248     0003                     STATUS          equ	3	;# 
   249     0004                     FSR             equ	4	;# 
   250     0005                     PORTA           equ	5	;# 
   251     0006                     PORTB           equ	6	;# 
   252     0007                     PORTC           equ	7	;# 
   253     0008                     PORTD           equ	8	;# 
   254     0009                     PORTE           equ	9	;# 
   255     000A                     PCLATH          equ	10	;# 
   256     000B                     INTCON          equ	11	;# 
   257     000C                     PIR1            equ	12	;# 
   258     000D                     PIR2            equ	13	;# 
   259     000E                     TMR1            equ	14	;# 
   260     000E                     TMR1L           equ	14	;# 
   261     000F                     TMR1H           equ	15	;# 
   262     0010                     T1CON           equ	16	;# 
   263     0011                     TMR2            equ	17	;# 
   264     0012                     T2CON           equ	18	;# 
   265     0013                     SSPBUF          equ	19	;# 
   266     0014                     SSPCON          equ	20	;# 
   267     0015                     CCPR1           equ	21	;# 
   268     0015                     CCPR1L          equ	21	;# 
   269     0016                     CCPR1H          equ	22	;# 
   270     0017                     CCP1CON         equ	23	;# 
   271     0018                     RCSTA           equ	24	;# 
   272     0019                     TXREG           equ	25	;# 
   273     001A                     RCREG           equ	26	;# 
   274     001B                     CCPR2           equ	27	;# 
   275     001B                     CCPR2L          equ	27	;# 
   276     001C                     CCPR2H          equ	28	;# 
   277     001D                     CCP2CON         equ	29	;# 
   278     001E                     ADRESH          equ	30	;# 
   279     001F                     ADCON0          equ	31	;# 
   280     0081                     OPTION_REG      equ	129	;# 
   281     0085                     TRISA           equ	133	;# 
   282     0086                     TRISB           equ	134	;# 
   283     0087                     TRISC           equ	135	;# 
   284     0088                     TRISD           equ	136	;# 
   285     0089                     TRISE           equ	137	;# 
   286     008C                     PIE1            equ	140	;# 
   287     008D                     PIE2            equ	141	;# 
   288     008E                     PCON            equ	142	;# 
   289     0091                     SSPCON2         equ	145	;# 
   290     0092                     PR2             equ	146	;# 
   291     0093                     SSPADD          equ	147	;# 
   292     0094                     SSPSTAT         equ	148	;# 
   293     0098                     TXSTA           equ	152	;# 
   294     0099                     SPBRG           equ	153	;# 
   295     009C                     CMCON           equ	156	;# 
   296     009D                     CVRCON          equ	157	;# 
   297     009E                     ADRESL          equ	158	;# 
   298     009F                     ADCON1          equ	159	;# 
   299     010C                     EEDATA          equ	268	;# 
   300     010D                     EEADR           equ	269	;# 
   301     010E                     EEDATH          equ	270	;# 
   302     010F                     EEADRH          equ	271	;# 
   303     018C                     EECON1          equ	396	;# 
   304     018D                     EECON2          equ	397	;# 
   305     0008                     _PORTD          set	8
   306     001E                     _ADRESH         set	30
   307     001F                     _ADCON0         set	31
   308     0049                     _RE1            set	73
   309     004A                     _RE2            set	74
   310     00FA                     _nDONE          set	250
   311     00FA                     _GO             set	250
   312     00F8                     _ADON           set	248
   313     0088                     _TRISD          set	136
   314     009E                     _ADRESL         set	158
   315     0449                     _TRISE1         set	1097
   316     044A                     _TRISE2         set	1098
   317     04FF                     _ADFM           set	1279
   318                           
   319                           	psect	strings
   320     0003                     __pstrings:
   321     0003                     stringtab:
   322     0003                     __stringtab:
   323     0003                     stringcode:	
   324                           ;	String table - string pointers are 1 byte each
   325                           
   326     0003                     stringdir:
   327     0003  3000               	movlw	high stringdir
   328     0004  008A               	movwf	10
   329     0005  0804               	movf	4,w
   330     0006  0A84               	incf	4,f
   331     0007  0782               	addwf	2,f
   332     0008                     __stringbase:
   333     0008  3400               	retlw	0
   334     0009                     __end_of__stringtab:
   335     0009                     STR_1:
   336     0009  3454               	retlw	84	;'T'
   337     000A  3445               	retlw	69	;'E'
   338     000B  344D               	retlw	77	;'M'
   339     000C  3450               	retlw	80	;'P'
   340     000D  3445               	retlw	69	;'E'
   341     000E  3452               	retlw	82	;'R'
   342     000F  3441               	retlw	65	;'A'
   343     0010  3454               	retlw	84	;'T'
   344     0011  3455               	retlw	85	;'U'
   345     0012  3452               	retlw	82	;'R'
   346     0013  3445               	retlw	69	;'E'
   347     0014  3400               	retlw	0
   348     0015                     STR_2:
   349     0015  342E               	retlw	46	;'.'
   350     0016  3430               	retlw	48	;'0'
   351     0017  3400               	retlw	0
   352     0018                     STR_3:
   353     0018  3443               	retlw	67	;'C'
   354     0019  3400               	retlw	0
   355                           
   356                           	psect	cinit
   357     07FC                     start_initialization:	
   358                           ; #config settings
   359                           
   360     07FC                     __initialization:
   361     07FC                     end_of_initialization:	
   362                           ;End of C runtime variable initialization code
   363                           
   364     07FC                     __end_of__initialization:
   365     07FC  0183               	clrf	3
   366     07FD  120A  118A  2F74   	ljmp	_main	;jump to C main() function
   367                           
   368                           	psect	cstackCOMMON
   369     0070                     __pcstackCOMMON:
   370     0070                     ?_init_clcd:
   371     0070                     ?_init_adc:	
   372                           ; 1 bytes @ 0x0
   373                           
   374     0070                     ?_init_config:	
   375                           ; 1 bytes @ 0x0
   376                           
   377     0070                     ?_main:	
   378                           ; 1 bytes @ 0x0
   379                           
   380     0070                     ?_clcd_write:	
   381                           ; 1 bytes @ 0x0
   382                           
   383     0070                     ?_init_display_controller:	
   384                           ; 1 bytes @ 0x0
   385                           
   386     0070                     ?_read_adc:	
   387                           ; 1 bytes @ 0x0
   388                           
   389     0070                     ?___wmul:	
   390                           ; 2 bytes @ 0x0
   391                           
   392     0070                     ?___lwdiv:	
   393                           ; 2 bytes @ 0x0
   394                           
   395     0070                     clcd_write@mode:	
   396                           ; 2 bytes @ 0x0
   397                           
   398     0070                     ___wmul@multiplier:	
   399                           ; 1 bytes @ 0x0
   400                           
   401     0070                     ___lwdiv@divisor:	
   402                           ; 2 bytes @ 0x0
   403                           
   404     0070                     ??_init_adc:	
   405                           ; 2 bytes @ 0x0
   406                           
   407                           
   408                           ; 1 bytes @ 0x0
   409     0070                     	ds	1
   410     0071                     ??_clcd_write:
   411                           
   412                           ; 1 bytes @ 0x1
   413     0071                     	ds	1
   414     0072                     ___wmul@multiplicand:
   415     0072                     ___lwdiv@dividend:	
   416                           ; 2 bytes @ 0x2
   417                           
   418     0072                     ??_read_adc:	
   419                           ; 2 bytes @ 0x2
   420                           
   421                           
   422                           ; 1 bytes @ 0x2
   423     0072                     	ds	1
   424     0073                     clcd_write@byte:
   425     0073                     read_adc@adc_reg_val:	
   426                           ; 1 bytes @ 0x3
   427                           
   428                           
   429                           ; 2 bytes @ 0x3
   430     0073                     	ds	1
   431     0074                     ?_clcd_print:
   432     0074                     clcd_print@str:	
   433                           ; 1 bytes @ 0x4
   434                           
   435     0074                     ___wmul@product:	
   436                           ; 1 bytes @ 0x4
   437                           
   438     0074                     ___lwdiv@quotient:	
   439                           ; 2 bytes @ 0x4
   440                           
   441     0074                     ??_init_display_controller:	
   442                           ; 2 bytes @ 0x4
   443                           
   444     0074                     ??___wmul:	
   445                           ; 1 bytes @ 0x4
   446                           
   447     0074                     ??___lwdiv:	
   448                           ; 1 bytes @ 0x4
   449                           
   450                           
   451                           ; 1 bytes @ 0x4
   452     0074                     	ds	1
   453     0075                     read_adc@channel:
   454     0075                     clcd_print@addr:	
   455                           ; 1 bytes @ 0x5
   456                           
   457                           
   458                           ; 1 bytes @ 0x5
   459     0075                     	ds	1
   460     0076                     ___lwdiv@counter:
   461     0076                     ??_init_clcd:	
   462                           ; 1 bytes @ 0x6
   463                           
   464     0076                     ??_clcd_print:	
   465                           ; 1 bytes @ 0x6
   466                           
   467     0076                     ??_init_config:	
   468                           ; 1 bytes @ 0x6
   469                           
   470                           
   471                           ; 1 bytes @ 0x6
   472     0076                     	ds	1
   473     0077                     ?___lwmod:
   474     0077                     ___lwmod@divisor:	
   475                           ; 2 bytes @ 0x7
   476                           
   477                           
   478                           ; 2 bytes @ 0x7
   479     0077                     	ds	2
   480     0079                     ___lwmod@dividend:
   481                           
   482                           ; 2 bytes @ 0x9
   483     0079                     	ds	2
   484     007B                     ___lwmod@counter:
   485     007B                     ??___lwmod:	
   486                           ; 1 bytes @ 0xB
   487                           
   488                           
   489                           ; 1 bytes @ 0xB
   490     007B                     	ds	1
   491     007C                     ?_clcd_putch:
   492     007C                     clcd_putch@addr:	
   493                           ; 1 bytes @ 0xC
   494                           
   495                           
   496                           ; 1 bytes @ 0xC
   497     007C                     	ds	1
   498     007D                     clcd_putch@data:
   499     007D                     ??_clcd_putch:	
   500                           ; 1 bytes @ 0xD
   501                           
   502                           
   503                           ; 1 bytes @ 0xD
   504     007D                     	ds	1
   505                           
   506                           	psect	cstackBANK0
   507     0020                     __pcstackBANK0:
   508     0020                     ??_main:
   509                           
   510                           ; 1 bytes @ 0x0
   511     0020                     	ds	2
   512     0022                     main@adc_reg_val:
   513                           
   514                           ; 2 bytes @ 0x2
   515     0022                     	ds	2
   516     0024                     main@val:
   517                           
   518                           ; 2 bytes @ 0x4
   519     0024                     	ds	2
   520                           
   521                           	psect	maintext
   522     0774                     __pmaintext:	
   523 ;;
   524 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   525 ;;
   526 ;; *************** function _main *****************
   527 ;; Defined at:
   528 ;;		line 22 in file "main.c"
   529 ;; Parameters:    Size  Location     Type
   530 ;;		None
   531 ;; Auto vars:     Size  Location     Type
   532 ;;  val             2    4[BANK0 ] unsigned int 
   533 ;;  adc_reg_val     2    2[BANK0 ] unsigned short 
   534 ;; Return value:  Size  Location     Type
   535 ;;                  1    wreg      void 
   536 ;; Registers used:
   537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   538 ;; Tracked objects:
   539 ;;		On entry : B00/0
   540 ;;		On exit  : 0/0
   541 ;;		Unchanged: 0/0
   542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   543 ;;      Params:         0       0       0       0       0
   544 ;;      Locals:         0       4       0       0       0
   545 ;;      Temps:          0       2       0       0       0
   546 ;;      Totals:         0       6       0       0       0
   547 ;;Total ram usage:        6 bytes
   548 ;; Hardware stack levels required when called: 4
   549 ;; This function calls:
   550 ;;		___lwdiv
   551 ;;		___lwmod
   552 ;;		___wmul
   553 ;;		_clcd_print
   554 ;;		_clcd_putch
   555 ;;		_init_config
   556 ;;		_read_adc
   557 ;; This function is called by:
   558 ;;		Startup code after reset
   559 ;; This function uses a non-reentrant model
   560 ;;
   561                           
   562     0774                     _main:	
   563                           ;psect for function _main
   564                           
   565     0774                     l914:	
   566                           ;incstack = 0
   567                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   568                           
   569                           
   570                           ;main.c: 23:     }
   571     0774  120A  118A  25E4  120A  118A  	fcall	_init_config
   572     0779                     l916:
   573     0779  3000               	movlw	0
   574     077A  120A  118A  25F8  120A  118A  	fcall	_read_adc
   575     077F  0871               	movf	?_read_adc+1,w
   576     0780  1283               	bcf	3,5	;RP0=0, select bank0
   577     0781  1303               	bcf	3,6	;RP1=0, select bank0
   578     0782  00A3               	movwf	main@adc_reg_val+1
   579     0783  0870               	movf	?_read_adc,w
   580     0784  00A2               	movwf	main@adc_reg_val
   581     0785                     l918:
   582     0785  0823               	movf	main@adc_reg_val+1,w
   583     0786  00F1               	movwf	___wmul@multiplier+1
   584     0787  0822               	movf	main@adc_reg_val,w
   585     0788  00F0               	movwf	___wmul@multiplier
   586     0789  30F4               	movlw	244
   587     078A  00F2               	movwf	___wmul@multiplicand
   588     078B  3001               	movlw	1
   589     078C  00F3               	movwf	___wmul@multiplicand+1
   590     078D  120A  118A  2617  120A  118A  	fcall	___wmul
   591     0792  0870               	movf	?___wmul,w
   592     0793  1283               	bcf	3,5	;RP0=0, select bank0
   593     0794  1303               	bcf	3,6	;RP1=0, select bank0
   594     0795  00A0               	movwf	??_main
   595     0796  0871               	movf	?___wmul+1,w
   596     0797  00A1               	movwf	??_main+1
   597     0798  300A               	movlw	10
   598     0799                     u485:
   599     0799  1003               	clrc
   600     079A  0CA1               	rrf	??_main+1,f
   601     079B  0CA0               	rrf	??_main,f
   602     079C  3EFF               	addlw	-1
   603     079D  1D03               	skipz
   604     079E  2F99               	goto	u485
   605     079F  0820               	movf	??_main,w
   606     07A0  00A4               	movwf	main@val
   607     07A1  0821               	movf	??_main+1,w
   608     07A2  00A5               	movwf	main@val+1
   609     07A3                     l920:
   610     07A3  30C5               	movlw	197
   611     07A4  00FC               	movwf	clcd_putch@addr
   612     07A5  300A               	movlw	10
   613     07A6  00F7               	movwf	___lwmod@divisor
   614     07A7  3000               	movlw	0
   615     07A8  00F8               	movwf	___lwmod@divisor+1
   616     07A9  300A               	movlw	10
   617     07AA  00F0               	movwf	___lwdiv@divisor
   618     07AB  3000               	movlw	0
   619     07AC  00F1               	movwf	___lwdiv@divisor+1
   620     07AD  0825               	movf	main@val+1,w
   621     07AE  00F3               	movwf	___lwdiv@dividend+1
   622     07AF  0824               	movf	main@val,w
   623     07B0  00F2               	movwf	___lwdiv@dividend
   624     07B1  120A  118A  26CF  120A  118A  	fcall	___lwdiv
   625     07B6  0871               	movf	?___lwdiv+1,w
   626     07B7  00FA               	movwf	___lwmod@dividend+1
   627     07B8  0870               	movf	?___lwdiv,w
   628     07B9  00F9               	movwf	___lwmod@dividend
   629     07BA  120A  118A  2697  120A  118A  	fcall	___lwmod
   630     07BF  0877               	movf	?___lwmod,w
   631     07C0  3E30               	addlw	48
   632     07C1  120A  118A  25D3  120A  118A  	fcall	_clcd_putch
   633     07C6                     l922:
   634     07C6  30C6               	movlw	198
   635     07C7  00FC               	movwf	clcd_putch@addr
   636     07C8  300A               	movlw	10
   637     07C9  00F7               	movwf	___lwmod@divisor
   638     07CA  3000               	movlw	0
   639     07CB  00F8               	movwf	___lwmod@divisor+1
   640     07CC  1283               	bcf	3,5	;RP0=0, select bank0
   641     07CD  1303               	bcf	3,6	;RP1=0, select bank0
   642     07CE  0825               	movf	main@val+1,w
   643     07CF  00FA               	movwf	___lwmod@dividend+1
   644     07D0  0824               	movf	main@val,w
   645     07D1  00F9               	movwf	___lwmod@dividend
   646     07D2  120A  118A  2697  120A  118A  	fcall	___lwmod
   647     07D7  0877               	movf	?___lwmod,w
   648     07D8  3E30               	addlw	48
   649     07D9  120A  118A  25D3  120A  118A  	fcall	_clcd_putch
   650     07DE  300D               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   651     07DF  00F4               	movwf	clcd_print@str
   652     07E0  30C7               	movlw	199
   653     07E1  00F5               	movwf	clcd_print@addr
   654     07E2  120A  118A  263C  120A  118A  	fcall	_clcd_print
   655     07E7                     l924:
   656     07E7  30C9               	movlw	201
   657     07E8  00FC               	movwf	clcd_putch@addr
   658     07E9  30DF               	movlw	223
   659     07EA  120A  118A  25D3  120A  118A  	fcall	_clcd_putch
   660     07EF                     l926:
   661     07EF  3010               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   662     07F0  00F4               	movwf	clcd_print@str
   663     07F1  30CA               	movlw	202
   664     07F2  00F5               	movwf	clcd_print@addr
   665     07F3  120A  118A  263C  120A  118A  	fcall	_clcd_print
   666     07F8  2F79               	goto	l916
   667     07F9  120A  118A  2800   	ljmp	start
   668     07FC                     __end_of_main:
   669                           
   670                           	psect	text1
   671     05F8                     __ptext1:	
   672 ;; *************** function _read_adc *****************
   673 ;; Defined at:
   674 ;;		line 18 in file "adc.c"
   675 ;; Parameters:    Size  Location     Type
   676 ;;  channel         1    wreg     unsigned char 
   677 ;; Auto vars:     Size  Location     Type
   678 ;;  channel         1    5[COMMON] unsigned char 
   679 ;;  adc_reg_val     2    3[COMMON] unsigned short 
   680 ;; Return value:  Size  Location     Type
   681 ;;                  2    0[COMMON] unsigned short 
   682 ;; Registers used:
   683 ;;		wreg, status,2, status,0
   684 ;; Tracked objects:
   685 ;;		On entry : 0/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   689 ;;      Params:         2       0       0       0       0
   690 ;;      Locals:         3       0       0       0       0
   691 ;;      Temps:          1       0       0       0       0
   692 ;;      Totals:         6       0       0       0       0
   693 ;;Total ram usage:        6 bytes
   694 ;; Hardware stack levels used: 1
   695 ;; This function calls:
   696 ;;		Nothing
   697 ;; This function is called by:
   698 ;;		_main
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702     05F8                     _read_adc:	
   703                           ;psect for function _read_adc
   704                           
   705                           
   706                           ;incstack = 0
   707                           ; Regs used in _read_adc: [wreg+status,2+status,0]
   708                           ;read_adc@channel stored from wreg
   709     05F8  00F5               	movwf	read_adc@channel
   710     05F9                     l842:
   711                           
   712                           ;adc.c: 18: unsigned short read_adc(unsigned char channel);adc.c: 19: {;adc.c: 20:     u
      +                          nsigned short adc_reg_val;;adc.c: 25:     ADCON0 = (ADCON0 & 0xC7) | (channel << 3);
   713     05F9  0875               	movf	read_adc@channel,w
   714     05FA  00F2               	movwf	??_read_adc
   715     05FB  3003               	movlw	3
   716     05FC                     u295:
   717     05FC  1003               	clrc
   718     05FD  0DF2               	rlf	??_read_adc,f
   719     05FE  3EFF               	addlw	-1
   720     05FF  1D03               	skipz
   721     0600  2DFC               	goto	u295
   722     0601  1283               	bcf	3,5	;RP0=0, select bank0
   723     0602  1303               	bcf	3,6	;RP1=0, select bank0
   724     0603  081F               	movf	31,w	;volatile
   725     0604  39C7               	andlw	199
   726     0605  0472               	iorwf	??_read_adc,w
   727     0606  009F               	movwf	31	;volatile
   728     0607                     l844:
   729                           
   730                           ;adc.c: 28:     GO = 1;
   731     0607  151F               	bsf	31,2	;volatile
   732     0608                     l41:	
   733                           ;adc.c: 30:     while (nDONE);
   734                           
   735     0608  191F               	btfsc	31,2	;volatile
   736     0609  2E0B               	goto	u301
   737     060A  2E0C               	goto	u300
   738     060B                     u301:
   739     060B  2E08               	goto	l41
   740     060C                     u300:
   741     060C                     l846:
   742                           
   743                           ;adc.c: 32:     adc_reg_val = (ADRESH << 8) | ADRESL;
   744     060C  081E               	movf	30,w	;volatile
   745     060D  00F4               	movwf	read_adc@adc_reg_val+1
   746     060E  1683               	bsf	3,5	;RP0=1, select bank1
   747     060F  1303               	bcf	3,6	;RP1=0, select bank1
   748     0610  081E               	movf	30,w	;volatile
   749     0611  00F3               	movwf	read_adc@adc_reg_val
   750                           
   751                           ;adc.c: 34:     return adc_reg_val;
   752     0612  0874               	movf	read_adc@adc_reg_val+1,w
   753     0613  00F1               	movwf	?_read_adc+1
   754     0614  0873               	movf	read_adc@adc_reg_val,w
   755     0615  00F0               	movwf	?_read_adc
   756     0616                     l44:
   757     0616  0008               	return
   758     0617                     __end_of_read_adc:
   759                           
   760                           	psect	text2
   761     05E4                     __ptext2:	
   762 ;; *************** function _init_config *****************
   763 ;; Defined at:
   764 ;;		line 15 in file "main.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;		None
   767 ;; Auto vars:     Size  Location     Type
   768 ;;		None
   769 ;; Return value:  Size  Location     Type
   770 ;;                  1    wreg      void 
   771 ;; Registers used:
   772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   778 ;;      Params:         0       0       0       0       0
   779 ;;      Locals:         0       0       0       0       0
   780 ;;      Temps:          0       0       0       0       0
   781 ;;      Totals:         0       0       0       0       0
   782 ;;Total ram usage:        0 bytes
   783 ;; Hardware stack levels used: 1
   784 ;; Hardware stack levels required when called: 3
   785 ;; This function calls:
   786 ;;		_clcd_print
   787 ;;		_init_adc
   788 ;;		_init_clcd
   789 ;; This function is called by:
   790 ;;		_main
   791 ;; This function uses a non-reentrant model
   792 ;;
   793                           
   794     05E4                     _init_config:	
   795                           ;psect for function _init_config
   796                           
   797     05E4                     l836:	
   798                           ;incstack = 0
   799                           ; Regs used in _init_config: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   800                           
   801                           
   802                           ;main.c: 16: 
   803     05E4  120A  118A  25C8  120A  118A  	fcall	_init_clcd
   804     05E9                     l838:
   805                           
   806                           ;main.c: 17:         clcd_putch(((val / 10) % 10) + '0', (0xC0 + 5));
   807     05E9  120A  118A  25C1  120A  118A  	fcall	_init_adc
   808     05EE                     l840:
   809                           
   810                           ;main.c: 19:         clcd_print(".0", (0xC0 + 7));
   811     05EE  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   812     05EF  00F4               	movwf	clcd_print@str
   813     05F0  3083               	movlw	131
   814     05F1  00F5               	movwf	clcd_print@addr
   815     05F2  120A  118A  263C  120A  118A  	fcall	_clcd_print
   816     05F7                     l13:
   817     05F7  0008               	return
   818     05F8                     __end_of_init_config:
   819                           
   820                           	psect	text3
   821     05C8                     __ptext3:	
   822 ;; *************** function _init_clcd *****************
   823 ;; Defined at:
   824 ;;		line 48 in file "clcd.c"
   825 ;; Parameters:    Size  Location     Type
   826 ;;		None
   827 ;; Auto vars:     Size  Location     Type
   828 ;;		None
   829 ;; Return value:  Size  Location     Type
   830 ;;                  1    wreg      void 
   831 ;; Registers used:
   832 ;;		wreg, status,2, status,0, pclath, cstack
   833 ;; Tracked objects:
   834 ;;		On entry : 0/0
   835 ;;		On exit  : 0/0
   836 ;;		Unchanged: 0/0
   837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   838 ;;      Params:         0       0       0       0       0
   839 ;;      Locals:         0       0       0       0       0
   840 ;;      Temps:          0       0       0       0       0
   841 ;;      Totals:         0       0       0       0       0
   842 ;;Total ram usage:        0 bytes
   843 ;; Hardware stack levels used: 1
   844 ;; Hardware stack levels required when called: 2
   845 ;; This function calls:
   846 ;;		_init_display_controller
   847 ;; This function is called by:
   848 ;;		_init_config
   849 ;; This function uses a non-reentrant model
   850 ;;
   851                           
   852     05C8                     _init_clcd:	
   853                           ;psect for function _init_clcd
   854                           
   855     05C8                     l818:	
   856                           ;incstack = 0
   857                           ; Regs used in _init_clcd: [wreg+status,2+status,0+pclath+cstack]
   858                           
   859                           
   860                           ;clcd.c: 50:     TRISD = 0x00;
   861     05C8  1683               	bsf	3,5	;RP0=1, select bank1
   862     05C9  1303               	bcf	3,6	;RP1=0, select bank1
   863     05CA  0188               	clrf	8	;volatile
   864     05CB                     l820:
   865                           
   866                           ;clcd.c: 53:     TRISE2 = 0;
   867     05CB  1109               	bcf	9,2	;volatile
   868     05CC                     l822:
   869                           
   870                           ;clcd.c: 54:     TRISE1 = 0;
   871     05CC  1089               	bcf	9,1	;volatile
   872     05CD                     l824:
   873                           
   874                           ;clcd.c: 56:     init_display_controller();
   875     05CD  120A  118A  2711  120A  118A  	fcall	_init_display_controller
   876     05D2                     l67:
   877     05D2  0008               	return
   878     05D3                     __end_of_init_clcd:
   879                           
   880                           	psect	text4
   881     0711                     __ptext4:	
   882 ;; *************** function _init_display_controller *****************
   883 ;; Defined at:
   884 ;;		line 26 in file "clcd.c"
   885 ;; Parameters:    Size  Location     Type
   886 ;;		None
   887 ;; Auto vars:     Size  Location     Type
   888 ;;		None
   889 ;; Return value:  Size  Location     Type
   890 ;;                  1    wreg      void 
   891 ;; Registers used:
   892 ;;		wreg, status,2, status,0, pclath, cstack
   893 ;; Tracked objects:
   894 ;;		On entry : 0/0
   895 ;;		On exit  : 0/0
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   898 ;;      Params:         0       0       0       0       0
   899 ;;      Locals:         0       0       0       0       0
   900 ;;      Temps:          2       0       0       0       0
   901 ;;      Totals:         2       0       0       0       0
   902 ;;Total ram usage:        2 bytes
   903 ;; Hardware stack levels used: 1
   904 ;; Hardware stack levels required when called: 1
   905 ;; This function calls:
   906 ;;		_clcd_write
   907 ;; This function is called by:
   908 ;;		_init_clcd
   909 ;; This function uses a non-reentrant model
   910 ;;
   911                           
   912     0711                     _init_display_controller:	
   913                           ;psect for function _init_display_controller
   914                           
   915     0711                     l794:	
   916                           ;incstack = 0
   917                           ; Regs used in _init_display_controller: [wreg+status,2+status,0+pclath+cstack]
   918                           
   919                           
   920                           ;clcd.c: 28:     _delay((unsigned long)((30)*(20000000/4000.0)));
   921     0711  30C3               	movlw	195
   922     0712  00F5               	movwf	??_init_display_controller+1
   923     0713  30CD               	movlw	205
   924     0714  00F4               	movwf	??_init_display_controller
   925     0715                     u497:
   926     0715  0BF4               	decfsz	??_init_display_controller,f
   927     0716  2F15               	goto	u497
   928     0717  0BF5               	decfsz	??_init_display_controller+1,f
   929     0718  2F15               	goto	u497
   930     0719                     l796:
   931                           
   932                           ;clcd.c: 31:     clcd_write(0x33, 0);
   933     0719  01F0               	clrf	clcd_write@mode
   934     071A  3033               	movlw	51
   935     071B  120A  118A  2661  120A  118A  	fcall	_clcd_write
   936     0720                     l798:
   937                           
   938                           ;clcd.c: 32:     _delay((unsigned long)((4100)*(20000000/4000000.0)));
   939     0720  301B               	movlw	27
   940     0721  00F5               	movwf	??_init_display_controller+1
   941     0722  309E               	movlw	158
   942     0723  00F4               	movwf	??_init_display_controller
   943     0724                     u507:
   944     0724  0BF4               	decfsz	??_init_display_controller,f
   945     0725  2F24               	goto	u507
   946     0726  0BF5               	decfsz	??_init_display_controller+1,f
   947     0727  2F24               	goto	u507
   948     0728  0000               	nop
   949                           
   950                           ;clcd.c: 33:     clcd_write(0x33, 0);
   951     0729  01F0               	clrf	clcd_write@mode
   952     072A  3033               	movlw	51
   953     072B  120A  118A  2661  120A  118A  	fcall	_clcd_write
   954     0730                     l800:
   955                           
   956                           ;clcd.c: 34:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   957     0730  30A6               	movlw	166
   958     0731  00F4               	movwf	??_init_display_controller
   959     0732                     u517:
   960     0732  0BF4               	decfsz	??_init_display_controller,f
   961     0733  2F32               	goto	u517
   962     0734  0000               	nop
   963     0735                     l802:
   964                           
   965                           ;clcd.c: 35:     clcd_write(0x33, 0);
   966     0735  01F0               	clrf	clcd_write@mode
   967     0736  3033               	movlw	51
   968     0737  120A  118A  2661  120A  118A  	fcall	_clcd_write
   969     073C                     l804:
   970                           
   971                           ;clcd.c: 36:     _delay((unsigned long)((1)*(20000000/4000000.0)));
   972     073C  2F3D               	nop2	;2 cycle nop
   973     073D  2F3E               	nop2	;2 cycle nop
   974     073E  0000               	nop
   975     073F                     l806:
   976                           
   977                           ;clcd.c: 38:     clcd_write(0x02, 0);
   978     073F  01F0               	clrf	clcd_write@mode
   979     0740  3002               	movlw	2
   980     0741  120A  118A  2661  120A  118A  	fcall	_clcd_write
   981     0746                     l808:
   982                           
   983                           ;clcd.c: 39:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   984     0746  30A6               	movlw	166
   985     0747  00F4               	movwf	??_init_display_controller
   986     0748                     u527:
   987     0748  0BF4               	decfsz	??_init_display_controller,f
   988     0749  2F48               	goto	u527
   989     074A  0000               	nop
   990                           
   991                           ;clcd.c: 40:     clcd_write(0x28, 0);
   992     074B  01F0               	clrf	clcd_write@mode
   993     074C  3028               	movlw	40
   994     074D  120A  118A  2661  120A  118A  	fcall	_clcd_write
   995     0752                     l810:
   996                           
   997                           ;clcd.c: 41:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   998     0752  30A6               	movlw	166
   999     0753  00F4               	movwf	??_init_display_controller
  1000     0754                     u537:
  1001     0754  0BF4               	decfsz	??_init_display_controller,f
  1002     0755  2F54               	goto	u537
  1003     0756  0000               	nop
  1004     0757                     l812:
  1005                           
  1006                           ;clcd.c: 42:     clcd_write(0x01, 0);
  1007     0757  01F0               	clrf	clcd_write@mode
  1008     0758  3001               	movlw	1
  1009     0759  120A  118A  2661  120A  118A  	fcall	_clcd_write
  1010                           
  1011                           ;clcd.c: 43:     _delay((unsigned long)((500)*(20000000/4000000.0)));
  1012     075E  3004               	movlw	4
  1013     075F  00F5               	movwf	??_init_display_controller+1
  1014     0760  303D               	movlw	61
  1015     0761  00F4               	movwf	??_init_display_controller
  1016     0762                     u547:
  1017     0762  0BF4               	decfsz	??_init_display_controller,f
  1018     0763  2F62               	goto	u547
  1019     0764  0BF5               	decfsz	??_init_display_controller+1,f
  1020     0765  2F62               	goto	u547
  1021     0766  2F67               	nop2
  1022     0767                     l814:
  1023                           
  1024                           ;clcd.c: 44:     clcd_write(0x0C, 0);
  1025     0767  01F0               	clrf	clcd_write@mode
  1026     0768  300C               	movlw	12
  1027     0769  120A  118A  2661  120A  118A  	fcall	_clcd_write
  1028     076E                     l816:
  1029                           
  1030                           ;clcd.c: 45:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  1031     076E  30A6               	movlw	166
  1032     076F  00F4               	movwf	??_init_display_controller
  1033     0770                     u557:
  1034     0770  0BF4               	decfsz	??_init_display_controller,f
  1035     0771  2F70               	goto	u557
  1036     0772  0000               	nop
  1037     0773                     l64:
  1038     0773  0008               	return
  1039     0774                     __end_of_init_display_controller:
  1040                           
  1041                           	psect	text5
  1042     05C1                     __ptext5:	
  1043 ;; *************** function _init_adc *****************
  1044 ;; Defined at:
  1045 ;;		line 9 in file "adc.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;		None
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;		None
  1050 ;; Return value:  Size  Location     Type
  1051 ;;                  1    wreg      void 
  1052 ;; Registers used:
  1053 ;;		None
  1054 ;; Tracked objects:
  1055 ;;		On entry : 0/0
  1056 ;;		On exit  : 0/0
  1057 ;;		Unchanged: 0/0
  1058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1059 ;;      Params:         0       0       0       0       0
  1060 ;;      Locals:         0       0       0       0       0
  1061 ;;      Temps:          0       0       0       0       0
  1062 ;;      Totals:         0       0       0       0       0
  1063 ;;Total ram usage:        0 bytes
  1064 ;; Hardware stack levels used: 1
  1065 ;; This function calls:
  1066 ;;		Nothing
  1067 ;; This function is called by:
  1068 ;;		_init_config
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072     05C1                     _init_adc:	
  1073                           ;psect for function _init_adc
  1074                           
  1075     05C1                     l826:	
  1076                           ;incstack = 0
  1077                           ; Regs used in _init_adc: []
  1078                           
  1079                           
  1080                           ;adc.c: 12:     ADFM = 1;
  1081     05C1  1683               	bsf	3,5	;RP0=1, select bank1
  1082     05C2  1303               	bcf	3,6	;RP1=0, select bank1
  1083     05C3  179F               	bsf	31,7	;volatile
  1084                           
  1085                           ;adc.c: 15:     ADON = 1;
  1086     05C4  1283               	bcf	3,5	;RP0=0, select bank0
  1087     05C5  1303               	bcf	3,6	;RP1=0, select bank0
  1088     05C6  141F               	bsf	31,0	;volatile
  1089     05C7                     l38:
  1090     05C7  0008               	return
  1091     05C8                     __end_of_init_adc:
  1092                           
  1093                           	psect	text6
  1094     063C                     __ptext6:	
  1095 ;; *************** function _clcd_print *****************
  1096 ;; Defined at:
  1097 ;;		line 64 in file "clcd.c"
  1098 ;; Parameters:    Size  Location     Type
  1099 ;;  str             1    4[COMMON] PTR const unsigned char 
  1100 ;;		 -> STR_3(2), STR_2(3), STR_1(12), 
  1101 ;;  addr            1    5[COMMON] unsigned char 
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;		None
  1104 ;; Return value:  Size  Location     Type
  1105 ;;                  1    wreg      void 
  1106 ;; Registers used:
  1107 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1108 ;; Tracked objects:
  1109 ;;		On entry : 0/0
  1110 ;;		On exit  : 0/0
  1111 ;;		Unchanged: 0/0
  1112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1113 ;;      Params:         2       0       0       0       0
  1114 ;;      Locals:         0       0       0       0       0
  1115 ;;      Temps:          0       0       0       0       0
  1116 ;;      Totals:         2       0       0       0       0
  1117 ;;Total ram usage:        2 bytes
  1118 ;; Hardware stack levels used: 1
  1119 ;; Hardware stack levels required when called: 1
  1120 ;; This function calls:
  1121 ;;		_clcd_write
  1122 ;; This function is called by:
  1123 ;;		_init_config
  1124 ;;		_main
  1125 ;; This function uses a non-reentrant model
  1126 ;;
  1127                           
  1128     063C                     _clcd_print:	
  1129                           ;psect for function _clcd_print
  1130                           
  1131     063C                     l828:	
  1132                           ;incstack = 0
  1133                           ; Regs used in _clcd_print: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1134                           
  1135                           
  1136                           ;clcd.c: 65:     clcd_write(addr, 0);
  1137     063C  01F0               	clrf	clcd_write@mode
  1138     063D  0875               	movf	clcd_print@addr,w
  1139     063E  120A  118A  2661  120A  118A  	fcall	_clcd_write
  1140                           
  1141                           ;clcd.c: 67:     while (*str != '\0') {
  1142     0643  2E54               	goto	l834
  1143     0644                     l830:
  1144                           
  1145                           ;clcd.c: 68:         clcd_write(*str, 1);
  1146     0644  01F0               	clrf	clcd_write@mode
  1147     0645  0AF0               	incf	clcd_write@mode,f
  1148     0646  0874               	movf	clcd_print@str,w
  1149     0647  0084               	movwf	4
  1150     0648  120A  118A  2003  120A  118A  	fcall	stringdir
  1151     064D  120A  118A  2661  120A  118A  	fcall	_clcd_write
  1152     0652                     l832:
  1153                           
  1154                           ;clcd.c: 69:         str++;
  1155     0652  3001               	movlw	1
  1156     0653  07F4               	addwf	clcd_print@str,f
  1157     0654                     l834:
  1158                           
  1159                           ;clcd.c: 67:     while (*str != '\0') {
  1160     0654  0874               	movf	clcd_print@str,w
  1161     0655  0084               	movwf	4
  1162     0656  120A  118A  2003  120A  118A  	fcall	stringdir
  1163     065B  3A00               	xorlw	0
  1164     065C  1D03               	skipz
  1165     065D  2E5F               	goto	u281
  1166     065E  2E60               	goto	u280
  1167     065F                     u281:
  1168     065F  2E44               	goto	l830
  1169     0660                     u280:
  1170     0660                     l76:
  1171     0660  0008               	return
  1172     0661                     __end_of_clcd_print:
  1173                           
  1174                           	psect	text7
  1175     05D3                     __ptext7:	
  1176 ;; *************** function _clcd_putch *****************
  1177 ;; Defined at:
  1178 ;;		line 59 in file "clcd.c"
  1179 ;; Parameters:    Size  Location     Type
  1180 ;;  data            1    wreg     const unsigned char 
  1181 ;;  addr            1   12[COMMON] unsigned char 
  1182 ;; Auto vars:     Size  Location     Type
  1183 ;;  data            1   13[COMMON] const unsigned char 
  1184 ;; Return value:  Size  Location     Type
  1185 ;;                  1    wreg      void 
  1186 ;; Registers used:
  1187 ;;		wreg, status,2, status,0, pclath, cstack
  1188 ;; Tracked objects:
  1189 ;;		On entry : 0/0
  1190 ;;		On exit  : 0/0
  1191 ;;		Unchanged: 0/0
  1192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1193 ;;      Params:         1       0       0       0       0
  1194 ;;      Locals:         1       0       0       0       0
  1195 ;;      Temps:          0       0       0       0       0
  1196 ;;      Totals:         2       0       0       0       0
  1197 ;;Total ram usage:        2 bytes
  1198 ;; Hardware stack levels used: 1
  1199 ;; Hardware stack levels required when called: 1
  1200 ;; This function calls:
  1201 ;;		_clcd_write
  1202 ;; This function is called by:
  1203 ;;		_main
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207     05D3                     _clcd_putch:	
  1208                           ;psect for function _clcd_putch
  1209                           
  1210                           
  1211                           ;incstack = 0
  1212                           ; Regs used in _clcd_putch: [wreg+status,2+status,0+pclath+cstack]
  1213                           ;clcd_putch@data stored from wreg
  1214     05D3  00FD               	movwf	clcd_putch@data
  1215     05D4                     l850:
  1216                           
  1217                           ;clcd.c: 60:     clcd_write(addr, 0);
  1218     05D4  01F0               	clrf	clcd_write@mode
  1219     05D5  087C               	movf	clcd_putch@addr,w
  1220     05D6  120A  118A  2661  120A  118A  	fcall	_clcd_write
  1221                           
  1222                           ;clcd.c: 61:     clcd_write(data, 1);
  1223     05DB  01F0               	clrf	clcd_write@mode
  1224     05DC  0AF0               	incf	clcd_write@mode,f
  1225     05DD  087D               	movf	clcd_putch@data,w
  1226     05DE  120A  118A  2661  120A  118A  	fcall	_clcd_write
  1227     05E3                     l70:
  1228     05E3  0008               	return
  1229     05E4                     __end_of_clcd_putch:
  1230                           
  1231                           	psect	text8
  1232     0661                     __ptext8:	
  1233 ;; *************** function _clcd_write *****************
  1234 ;; Defined at:
  1235 ;;		line 10 in file "clcd.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;  byte            1    wreg     unsigned char 
  1238 ;;  mode            1    0[COMMON] unsigned char 
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;  byte            1    3[COMMON] unsigned char 
  1241 ;; Return value:  Size  Location     Type
  1242 ;;                  1    wreg      void 
  1243 ;; Registers used:
  1244 ;;		wreg, status,2, status,0
  1245 ;; Tracked objects:
  1246 ;;		On entry : 0/0
  1247 ;;		On exit  : 0/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1250 ;;      Params:         1       0       0       0       0
  1251 ;;      Locals:         1       0       0       0       0
  1252 ;;      Temps:          2       0       0       0       0
  1253 ;;      Totals:         4       0       0       0       0
  1254 ;;Total ram usage:        4 bytes
  1255 ;; Hardware stack levels used: 1
  1256 ;; This function calls:
  1257 ;;		Nothing
  1258 ;; This function is called by:
  1259 ;;		_init_display_controller
  1260 ;;		_clcd_putch
  1261 ;;		_clcd_print
  1262 ;; This function uses a non-reentrant model
  1263 ;;
  1264                           
  1265     0661                     _clcd_write:	
  1266                           ;psect for function _clcd_write
  1267                           
  1268                           
  1269                           ;incstack = 0
  1270                           ; Regs used in _clcd_write: [wreg+status,2+status,0]
  1271                           ;clcd_write@byte stored from wreg
  1272     0661  00F3               	movwf	clcd_write@byte
  1273     0662                     l774:
  1274                           
  1275                           ;clcd.c: 11:     RE2 = mode;
  1276     0662  1870               	btfsc	clcd_write@mode,0
  1277     0663  2E65               	goto	u251
  1278     0664  2E69               	goto	u250
  1279     0665                     u251:
  1280     0665  1283               	bcf	3,5	;RP0=0, select bank0
  1281     0666  1303               	bcf	3,6	;RP1=0, select bank0
  1282     0667  1509               	bsf	9,2	;volatile
  1283     0668  2E6C               	goto	u264
  1284     0669                     u250:
  1285     0669  1283               	bcf	3,5	;RP0=0, select bank0
  1286     066A  1303               	bcf	3,6	;RP1=0, select bank0
  1287     066B  1109               	bcf	9,2	;volatile
  1288     066C                     u264:
  1289     066C                     l776:
  1290                           
  1291                           ;clcd.c: 13:     PORTD = byte & 0xF0;
  1292     066C  0873               	movf	clcd_write@byte,w
  1293     066D  39F0               	andlw	240
  1294     066E  0088               	movwf	8	;volatile
  1295     066F                     l778:
  1296                           
  1297                           ;clcd.c: 14:     RE1 = 1;
  1298     066F  1489               	bsf	9,1	;volatile
  1299     0670                     l780:
  1300                           
  1301                           ;clcd.c: 15:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  1302     0670  30A6               	movlw	166
  1303     0671  00F1               	movwf	??_clcd_write
  1304     0672                     u567:
  1305     0672  0BF1               	decfsz	??_clcd_write,f
  1306     0673  2E72               	goto	u567
  1307     0674  0000               	nop
  1308     0675                     l782:
  1309                           
  1310                           ;clcd.c: 16:     RE1 = 0;
  1311     0675  1283               	bcf	3,5	;RP0=0, select bank0
  1312     0676  1303               	bcf	3,6	;RP1=0, select bank0
  1313     0677  1089               	bcf	9,1	;volatile
  1314     0678                     l784:
  1315                           
  1316                           ;clcd.c: 18:     PORTD = (byte & 0x0F) << 4;
  1317     0678  0873               	movf	clcd_write@byte,w
  1318     0679  390F               	andlw	15
  1319     067A  00F1               	movwf	??_clcd_write
  1320     067B  3003               	movlw	3
  1321     067C                     u275:
  1322     067C  1003               	clrc
  1323     067D  0DF1               	rlf	??_clcd_write,f
  1324     067E  3EFF               	addlw	-1
  1325     067F  1D03               	skipz
  1326     0680  2E7C               	goto	u275
  1327     0681  1003               	clrc
  1328     0682  0D71               	rlf	??_clcd_write,w
  1329     0683  0088               	movwf	8	;volatile
  1330     0684                     l786:
  1331                           
  1332                           ;clcd.c: 19:     RE1 = 1;
  1333     0684  1489               	bsf	9,1	;volatile
  1334     0685                     l788:
  1335                           
  1336                           ;clcd.c: 20:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  1337     0685  30A6               	movlw	166
  1338     0686  00F1               	movwf	??_clcd_write
  1339     0687                     u577:
  1340     0687  0BF1               	decfsz	??_clcd_write,f
  1341     0688  2E87               	goto	u577
  1342     0689  0000               	nop
  1343     068A                     l790:
  1344                           
  1345                           ;clcd.c: 21:     RE1 = 0;
  1346     068A  1283               	bcf	3,5	;RP0=0, select bank0
  1347     068B  1303               	bcf	3,6	;RP1=0, select bank0
  1348     068C  1089               	bcf	9,1	;volatile
  1349     068D                     l792:
  1350                           
  1351                           ;clcd.c: 23:     _delay((unsigned long)((4100)*(20000000/4000000.0)));
  1352     068D  301B               	movlw	27
  1353     068E  00F2               	movwf	??_clcd_write+1
  1354     068F  309E               	movlw	158
  1355     0690  00F1               	movwf	??_clcd_write
  1356     0691                     u587:
  1357     0691  0BF1               	decfsz	??_clcd_write,f
  1358     0692  2E91               	goto	u587
  1359     0693  0BF2               	decfsz	??_clcd_write+1,f
  1360     0694  2E91               	goto	u587
  1361     0695  0000               	nop
  1362     0696                     l61:
  1363     0696  0008               	return
  1364     0697                     __end_of_clcd_write:
  1365                           
  1366                           	psect	text9
  1367     0617                     __ptext9:	
  1368 ;; *************** function ___wmul *****************
  1369 ;; Defined at:
  1370 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul16.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;  multiplier      2    0[COMMON] unsigned int 
  1373 ;;  multiplicand    2    2[COMMON] unsigned int 
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;  product         2    4[COMMON] unsigned int 
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  2    0[COMMON] unsigned int 
  1378 ;; Registers used:
  1379 ;;		wreg, status,2, status,0
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1385 ;;      Params:         4       0       0       0       0
  1386 ;;      Locals:         2       0       0       0       0
  1387 ;;      Temps:          0       0       0       0       0
  1388 ;;      Totals:         6       0       0       0       0
  1389 ;;Total ram usage:        6 bytes
  1390 ;; Hardware stack levels used: 1
  1391 ;; This function calls:
  1392 ;;		Nothing
  1393 ;; This function is called by:
  1394 ;;		_main
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398     0617                     ___wmul:	
  1399                           ;psect for function ___wmul
  1400                           
  1401     0617                     l852:	
  1402                           ;incstack = 0
  1403                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1404                           
  1405     0617  01F4               	clrf	___wmul@product
  1406     0618  01F5               	clrf	___wmul@product+1
  1407     0619                     l854:
  1408     0619  1C70               	btfss	___wmul@multiplier,0
  1409     061A  2E1C               	goto	u311
  1410     061B  2E1D               	goto	u310
  1411     061C                     u311:
  1412     061C  2E23               	goto	l162
  1413     061D                     u310:
  1414     061D                     l856:
  1415     061D  0872               	movf	___wmul@multiplicand,w
  1416     061E  07F4               	addwf	___wmul@product,f
  1417     061F  1803               	skipnc
  1418     0620  0AF5               	incf	___wmul@product+1,f
  1419     0621  0873               	movf	___wmul@multiplicand+1,w
  1420     0622  07F5               	addwf	___wmul@product+1,f
  1421     0623                     l162:
  1422     0623  3001               	movlw	1
  1423     0624                     u325:
  1424     0624  1003               	clrc
  1425     0625  0DF2               	rlf	___wmul@multiplicand,f
  1426     0626  0DF3               	rlf	___wmul@multiplicand+1,f
  1427     0627  3EFF               	addlw	-1
  1428     0628  1D03               	skipz
  1429     0629  2E24               	goto	u325
  1430     062A                     l858:
  1431     062A  3001               	movlw	1
  1432     062B                     u335:
  1433     062B  1003               	clrc
  1434     062C  0CF1               	rrf	___wmul@multiplier+1,f
  1435     062D  0CF0               	rrf	___wmul@multiplier,f
  1436     062E  3EFF               	addlw	-1
  1437     062F  1D03               	skipz
  1438     0630  2E2B               	goto	u335
  1439     0631                     l860:
  1440     0631  0870               	movf	___wmul@multiplier,w
  1441     0632  0471               	iorwf	___wmul@multiplier+1,w
  1442     0633  1D03               	btfss	3,2
  1443     0634  2E36               	goto	u341
  1444     0635  2E37               	goto	u340
  1445     0636                     u341:
  1446     0636  2E19               	goto	l854
  1447     0637                     u340:
  1448     0637                     l862:
  1449     0637  0875               	movf	___wmul@product+1,w
  1450     0638  00F1               	movwf	?___wmul+1
  1451     0639  0874               	movf	___wmul@product,w
  1452     063A  00F0               	movwf	?___wmul
  1453     063B                     l164:
  1454     063B  0008               	return
  1455     063C                     __end_of___wmul:
  1456                           
  1457                           	psect	text10
  1458     0697                     __ptext10:	
  1459 ;; *************** function ___lwmod *****************
  1460 ;; Defined at:
  1461 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwmod.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;  divisor         2    7[COMMON] unsigned int 
  1464 ;;  dividend        2    9[COMMON] unsigned int 
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;  counter         1   11[COMMON] unsigned char 
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  2    7[COMMON] unsigned int 
  1469 ;; Registers used:
  1470 ;;		wreg, status,2, status,0
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1476 ;;      Params:         4       0       0       0       0
  1477 ;;      Locals:         1       0       0       0       0
  1478 ;;      Temps:          0       0       0       0       0
  1479 ;;      Totals:         5       0       0       0       0
  1480 ;;Total ram usage:        5 bytes
  1481 ;; Hardware stack levels used: 1
  1482 ;; This function calls:
  1483 ;;		Nothing
  1484 ;; This function is called by:
  1485 ;;		_main
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489     0697                     ___lwmod:	
  1490                           ;psect for function ___lwmod
  1491                           
  1492     0697                     l892:	
  1493                           ;incstack = 0
  1494                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1495                           
  1496     0697  0877               	movf	___lwmod@divisor,w
  1497     0698  0478               	iorwf	___lwmod@divisor+1,w
  1498     0699  1903               	btfsc	3,2
  1499     069A  2E9C               	goto	u421
  1500     069B  2E9D               	goto	u420
  1501     069C                     u421:
  1502     069C  2ECA               	goto	l910
  1503     069D                     u420:
  1504     069D                     l894:
  1505     069D  3001               	movlw	1
  1506     069E  00FB               	movwf	___lwmod@counter
  1507     069F  2EA9               	goto	l900
  1508     06A0                     l896:
  1509     06A0  3001               	movlw	1
  1510     06A1                     u435:
  1511     06A1  1003               	clrc
  1512     06A2  0DF7               	rlf	___lwmod@divisor,f
  1513     06A3  0DF8               	rlf	___lwmod@divisor+1,f
  1514     06A4  3EFF               	addlw	-1
  1515     06A5  1D03               	skipz
  1516     06A6  2EA1               	goto	u435
  1517     06A7                     l898:
  1518     06A7  3001               	movlw	1
  1519     06A8  07FB               	addwf	___lwmod@counter,f
  1520     06A9                     l900:
  1521     06A9  1FF8               	btfss	___lwmod@divisor+1,7
  1522     06AA  2EAC               	goto	u441
  1523     06AB  2EAD               	goto	u440
  1524     06AC                     u441:
  1525     06AC  2EA0               	goto	l896
  1526     06AD                     u440:
  1527     06AD                     l902:
  1528     06AD  0878               	movf	___lwmod@divisor+1,w
  1529     06AE  027A               	subwf	___lwmod@dividend+1,w
  1530     06AF  1D03               	skipz
  1531     06B0  2EB3               	goto	u455
  1532     06B1  0877               	movf	___lwmod@divisor,w
  1533     06B2  0279               	subwf	___lwmod@dividend,w
  1534     06B3                     u455:
  1535     06B3  1C03               	skipc
  1536     06B4  2EB6               	goto	u451
  1537     06B5  2EB7               	goto	u450
  1538     06B6                     u451:
  1539     06B6  2EBD               	goto	l906
  1540     06B7                     u450:
  1541     06B7                     l904:
  1542     06B7  0877               	movf	___lwmod@divisor,w
  1543     06B8  02F9               	subwf	___lwmod@dividend,f
  1544     06B9  0878               	movf	___lwmod@divisor+1,w
  1545     06BA  1C03               	skipc
  1546     06BB  03FA               	decf	___lwmod@dividend+1,f
  1547     06BC  02FA               	subwf	___lwmod@dividend+1,f
  1548     06BD                     l906:
  1549     06BD  3001               	movlw	1
  1550     06BE                     u465:
  1551     06BE  1003               	clrc
  1552     06BF  0CF8               	rrf	___lwmod@divisor+1,f
  1553     06C0  0CF7               	rrf	___lwmod@divisor,f
  1554     06C1  3EFF               	addlw	-1
  1555     06C2  1D03               	skipz
  1556     06C3  2EBE               	goto	u465
  1557     06C4                     l908:
  1558     06C4  3001               	movlw	1
  1559     06C5  02FB               	subwf	___lwmod@counter,f
  1560     06C6  1D03               	btfss	3,2
  1561     06C7  2EC9               	goto	u471
  1562     06C8  2ECA               	goto	u470
  1563     06C9                     u471:
  1564     06C9  2EAD               	goto	l902
  1565     06CA                     u470:
  1566     06CA                     l910:
  1567     06CA  087A               	movf	___lwmod@dividend+1,w
  1568     06CB  00F8               	movwf	?___lwmod+1
  1569     06CC  0879               	movf	___lwmod@dividend,w
  1570     06CD  00F7               	movwf	?___lwmod
  1571     06CE                     l452:
  1572     06CE  0008               	return
  1573     06CF                     __end_of___lwmod:
  1574                           
  1575                           	psect	text11
  1576     06CF                     __ptext11:	
  1577 ;; *************** function ___lwdiv *****************
  1578 ;; Defined at:
  1579 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwdiv.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;  divisor         2    0[COMMON] unsigned int 
  1582 ;;  dividend        2    2[COMMON] unsigned int 
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;  quotient        2    4[COMMON] unsigned int 
  1585 ;;  counter         1    6[COMMON] unsigned char 
  1586 ;; Return value:  Size  Location     Type
  1587 ;;                  2    0[COMMON] unsigned int 
  1588 ;; Registers used:
  1589 ;;		wreg, status,2, status,0
  1590 ;; Tracked objects:
  1591 ;;		On entry : 0/0
  1592 ;;		On exit  : 0/0
  1593 ;;		Unchanged: 0/0
  1594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1595 ;;      Params:         4       0       0       0       0
  1596 ;;      Locals:         3       0       0       0       0
  1597 ;;      Temps:          0       0       0       0       0
  1598 ;;      Totals:         7       0       0       0       0
  1599 ;;Total ram usage:        7 bytes
  1600 ;; Hardware stack levels used: 1
  1601 ;; This function calls:
  1602 ;;		Nothing
  1603 ;; This function is called by:
  1604 ;;		_main
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608     06CF                     ___lwdiv:	
  1609                           ;psect for function ___lwdiv
  1610                           
  1611     06CF                     l866:	
  1612                           ;incstack = 0
  1613                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1614                           
  1615     06CF  01F4               	clrf	___lwdiv@quotient
  1616     06D0  01F5               	clrf	___lwdiv@quotient+1
  1617     06D1                     l868:
  1618     06D1  0870               	movf	___lwdiv@divisor,w
  1619     06D2  0471               	iorwf	___lwdiv@divisor+1,w
  1620     06D3  1903               	btfsc	3,2
  1621     06D4  2ED6               	goto	u351
  1622     06D5  2ED7               	goto	u350
  1623     06D6                     u351:
  1624     06D6  2F0C               	goto	l888
  1625     06D7                     u350:
  1626     06D7                     l870:
  1627     06D7  3001               	movlw	1
  1628     06D8  00F6               	movwf	___lwdiv@counter
  1629     06D9  2EE3               	goto	l876
  1630     06DA                     l872:
  1631     06DA  3001               	movlw	1
  1632     06DB                     u365:
  1633     06DB  1003               	clrc
  1634     06DC  0DF0               	rlf	___lwdiv@divisor,f
  1635     06DD  0DF1               	rlf	___lwdiv@divisor+1,f
  1636     06DE  3EFF               	addlw	-1
  1637     06DF  1D03               	skipz
  1638     06E0  2EDB               	goto	u365
  1639     06E1                     l874:
  1640     06E1  3001               	movlw	1
  1641     06E2  07F6               	addwf	___lwdiv@counter,f
  1642     06E3                     l876:
  1643     06E3  1FF1               	btfss	___lwdiv@divisor+1,7
  1644     06E4  2EE6               	goto	u371
  1645     06E5  2EE7               	goto	u370
  1646     06E6                     u371:
  1647     06E6  2EDA               	goto	l872
  1648     06E7                     u370:
  1649     06E7                     l878:
  1650     06E7  3001               	movlw	1
  1651     06E8                     u385:
  1652     06E8  1003               	clrc
  1653     06E9  0DF4               	rlf	___lwdiv@quotient,f
  1654     06EA  0DF5               	rlf	___lwdiv@quotient+1,f
  1655     06EB  3EFF               	addlw	-1
  1656     06EC  1D03               	skipz
  1657     06ED  2EE8               	goto	u385
  1658     06EE  0871               	movf	___lwdiv@divisor+1,w
  1659     06EF  0273               	subwf	___lwdiv@dividend+1,w
  1660     06F0  1D03               	skipz
  1661     06F1  2EF4               	goto	u395
  1662     06F2  0870               	movf	___lwdiv@divisor,w
  1663     06F3  0272               	subwf	___lwdiv@dividend,w
  1664     06F4                     u395:
  1665     06F4  1C03               	skipc
  1666     06F5  2EF7               	goto	u391
  1667     06F6  2EF8               	goto	u390
  1668     06F7                     u391:
  1669     06F7  2EFF               	goto	l884
  1670     06F8                     u390:
  1671     06F8                     l880:
  1672     06F8  0870               	movf	___lwdiv@divisor,w
  1673     06F9  02F2               	subwf	___lwdiv@dividend,f
  1674     06FA  0871               	movf	___lwdiv@divisor+1,w
  1675     06FB  1C03               	skipc
  1676     06FC  03F3               	decf	___lwdiv@dividend+1,f
  1677     06FD  02F3               	subwf	___lwdiv@dividend+1,f
  1678     06FE                     l882:
  1679     06FE  1474               	bsf	___lwdiv@quotient,0
  1680     06FF                     l884:
  1681     06FF  3001               	movlw	1
  1682     0700                     u405:
  1683     0700  1003               	clrc
  1684     0701  0CF1               	rrf	___lwdiv@divisor+1,f
  1685     0702  0CF0               	rrf	___lwdiv@divisor,f
  1686     0703  3EFF               	addlw	-1
  1687     0704  1D03               	skipz
  1688     0705  2F00               	goto	u405
  1689     0706                     l886:
  1690     0706  3001               	movlw	1
  1691     0707  02F6               	subwf	___lwdiv@counter,f
  1692     0708  1D03               	btfss	3,2
  1693     0709  2F0B               	goto	u411
  1694     070A  2F0C               	goto	u410
  1695     070B                     u411:
  1696     070B  2EE7               	goto	l878
  1697     070C                     u410:
  1698     070C                     l888:
  1699     070C  0875               	movf	___lwdiv@quotient+1,w
  1700     070D  00F1               	movwf	?___lwdiv+1
  1701     070E  0874               	movf	___lwdiv@quotient,w
  1702     070F  00F0               	movwf	?___lwdiv
  1703     0710                     l442:
  1704     0710  0008               	return
  1705     0711                     __end_of___lwdiv:
  1706     0002                     ___latbits      equ	2
  1707     007E                     btemp           set	126	;btemp
  1708     007E                     wtemp0          set	126
  1709                           
  1710                           	psect	config
  1711                           
  1712                           ;Config register CONFIG @ 0x2007
  1713                           ;	Oscillator Selection bits
  1714                           ;	FOSC = 0x3, unprogrammed default
  1715                           ;	Watchdog Timer Enable bit
  1716                           ;	WDTE = OFF, WDT disabled
  1717                           ;	Power-up Timer Enable bit
  1718                           ;	PWRTE = 0x1, unprogrammed default
  1719                           ;	Brown-out Reset Enable bit
  1720                           ;	BOREN = 0x1, unprogrammed default
  1721                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1722                           ;	LVP = 0x1, unprogrammed default
  1723                           ;	Data EEPROM Memory Code Protection bit
  1724                           ;	CPD = 0x1, unprogrammed default
  1725                           ;	Flash Program Memory Write Enable bits
  1726                           ;	WRT = 0x3, unprogrammed default
  1727                           ;	In-Circuit Debugger Mode bit
  1728                           ;	DEBUG = 0x1, unprogrammed default
  1729                           ;	Flash Program Memory Code Protection bit
  1730                           ;	CP = 0x1, unprogrammed default
  1731     2007                     	org	8199
  1732     2007  3FFB               	dw	16379

Data Sizes:
    Strings     17
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      6       6
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    clcd_print@str	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_1(CODE[12]), STR_2(CODE[3]), STR_3(CODE[2]), 


Critical Paths under _main in COMMON

    _main->_clcd_putch
    _init_config->_clcd_print
    _init_clcd->_init_display_controller
    _init_display_controller->_clcd_write
    _clcd_print->_clcd_write
    _clcd_putch->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    1105
                                              0 BANK0      6     6      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                         _clcd_print
                         _clcd_putch
                        _init_config
                           _read_adc
 ---------------------------------------------------------------------------------
 (1) _read_adc                                             6     4      2      52
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0     255
                         _clcd_print
                           _init_adc
                          _init_clcd
 ---------------------------------------------------------------------------------
 (2) _init_clcd                                            0     0      0      91
            _init_display_controller
 ---------------------------------------------------------------------------------
 (3) _init_display_controller                              2     2      0      91
                                              4 COMMON     2     2      0
                         _clcd_write
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clcd_print                                           2     0      2     164
                                              4 COMMON     2     0      2
                         _clcd_write
 ---------------------------------------------------------------------------------
 (1) _clcd_putch                                           2     1      1     145
                                             12 COMMON     2     1      1
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
                         _clcd_write
 ---------------------------------------------------------------------------------
 (4) _clcd_write                                           4     3      1      91
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4      94
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     163
                                              7 COMMON     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     164
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwdiv
   ___lwmod
     ___lwdiv (ARG)
   ___wmul
   _clcd_print
     _clcd_write
   _clcd_putch
     ___lwdiv (ARG)
     ___lwmod (ARG)
     _clcd_write (ARG)
   _init_config
     _clcd_print
     _init_adc
     _init_clcd
       _init_display_controller
         _clcd_write
   _read_adc

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     14      14    100.0%
BANK0               80      6       6      7.5%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      20      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Dec 25 20:12:47 2024

                              pc 0002                   clcd_print@addr 0075                               l13 05F7  
                             l41 0608                               l44 0616                               l61 0696  
                             l70 05E3                               l38 05C7                               l64 0773  
                             l67 05D2                               l76 0660                               _GO 00FA  
                             fsr 0004              ___wmul@multiplicand 0072                              l162 0623  
                            l164 063B                              l442 0710                              l452 06CE  
                            l800 0730                              l810 0752                              l802 0735  
                            l900 06A9                              l812 0757                              l804 073C  
                            l820 05CB                              l902 06AD                              l910 06CA  
                            l830 0644                              l814 0767                              l806 073F  
                            l822 05CC                              l904 06B7                              l832 0652  
                            l816 076E                              l808 0746                              l824 05CD  
                            l840 05EE                              l920 07A3                              l906 06BD  
                            l850 05D4                              l834 0654                              l826 05C1  
                            l818 05C8                              l842 05F9                              l922 07C6  
                            l914 0774                              l908 06C4                              l860 0631  
                            l852 0617                              l780 0670                              l828 063C  
                            l836 05E4                              l844 0607                              l924 07E7  
                            l916 0779                              l870 06D7                              l862 0637  
                            l854 0619                              l790 068A                              l782 0675  
                            l774 0662                              l838 05E9                              l846 060C  
                            l926 07EF                              l918 0785                              l880 06F8  
                            l872 06DA                              l856 061D                              l792 068D  
                            l784 0678                              l776 066C                              l882 06FE  
                            l874 06E1                              l866 06CF                              l858 062A  
                            l786 0684                              l778 066F                              l794 0711  
                            l884 06FF                              l876 06E3                              l868 06D1  
                            l892 0697                              l788 0685                              l796 0719  
                            l886 0706                              l878 06E7                              l894 069D  
                            l798 0720                              l888 070C                              l896 06A0  
                            l898 06A7                              _RE1 0049                              _RE2 004A  
                            u300 060C                              u301 060B                              u310 061D  
                            u311 061C                              u410 070C                              u250 0669  
                            u411 070B                              u251 0665                              u420 069D  
                            u340 0637                              u405 0700                              u421 069C  
                            u341 0636                              u325 0624                              u350 06D7  
                            u351 06D6                              u335 062B                              u440 06AD  
                            u264 066C                              u280 0660                              u441 06AC  
                            u281 065F                              u370 06E7                              u450 06B7  
                            u371 06E6                              u451 06B6                              u435 06A1  
                            u275 067C                              u507 0724                              u365 06DB  
                            u517 0732                              u390 06F8                              u470 06CA  
                            u391 06F7                              u471 06C9                              u455 06B3  
                            u527 0748                              u295 05FC                              u385 06E8  
                            u465 06BE                              u537 0754                              u395 06F4  
                            u547 0762                              u557 0770                              u485 0799  
                            u567 0672                              u577 0687                              u497 0715  
                            u587 0691                   clcd_putch@addr 007C                              fsr0 0004  
                 clcd_putch@data 007D                             _ADFM 04FF                             _ADON 00F8  
                           STR_1 0009                             STR_2 0015                             STR_3 0018  
                           _main 0774                             btemp 007E                             start 0000  
                 clcd_write@byte 0073                   clcd_write@mode 0070                            ?_main 0070  
                __end_of___lwdiv 0711                  __end_of___lwmod 06CF                     ?_init_config 0070  
                          _PORTD 0008                            _TRISD 0088                            _nDONE 00FA  
                          pclath 000A                            status 0003                            wtemp0 007E  
                __initialization 07FC                     __end_of_main 07FC                           ??_main 0020  
                         _ADCON0 001F                           _ADRESH 001E                           _ADRESL 009E  
                         _TRISE1 0449                           _TRISE2 044A          _init_display_controller 0711  
                         ___wmul 0617                        ??___lwdiv 0074                        ??___lwmod 007B  
               __end_of_init_adc 05C8                 __end_of_read_adc 0617          __end_of__initialization 07FC  
                 __pcstackCOMMON 0070        ??_init_display_controller 0074                       _clcd_print 063C  
                     _clcd_putch 05D3                       _clcd_write 0661                       __pmaintext 0774  
                        ?___wmul 0070                       __stringtab 0003                        ?_init_adc 0070  
                      ?_read_adc 0070                          ___lwdiv 06CF                          ___lwmod 0697  
                        __ptext1 05F8                          __ptext2 05E4                          __ptext3 05C8  
                        __ptext4 0711                          __ptext5 05C1                          __ptext6 063C  
                        __ptext7 05D3                          __ptext8 0661                          __ptext9 0617  
__end_of_init_display_controller 0774                __end_of_init_clcd 05D3                          main@val 0024  
           end_of_initialization 07FC                       ??_init_adc 0070                       ??_read_adc 0072  
                    ?_clcd_print 0074                      ?_clcd_putch 007C                      ?_clcd_write 0070  
                main@adc_reg_val 0022                  read_adc@channel 0075                    clcd_print@str 0074  
                 __end_of___wmul 063C              start_initialization 07FC                         ??___wmul 0074  
                  ??_init_config 0076                        ___latbits 0002                    __pcstackBANK0 0020  
               ___lwdiv@dividend 0072                         ?___lwdiv 0070                         ?___lwmod 0077  
                      __pstrings 0003              read_adc@adc_reg_val 0073                 ___lwdiv@quotient 0074  
                      _init_clcd 05C8              __end_of_init_config 05F8         ?_init_display_controller 0070  
                 ___wmul@product 0074                     ??_clcd_print 0076                     ??_clcd_putch 007D  
                   ??_clcd_write 0071                      __stringbase 0008                ___wmul@multiplier 0070  
             __end_of_clcd_print 0661               __end_of_clcd_putch 05E4               __end_of_clcd_write 0697  
                     ?_init_clcd 0070               __end_of__stringtab 0009                      _init_config 05E4  
                ___lwdiv@divisor 0070                  ___lwdiv@counter 0076                         __ptext10 0697  
                       __ptext11 06CF                         _init_adc 05C1                         _read_adc 05F8  
                    ??_init_clcd 0076                 ___lwmod@dividend 0079                        stringcode 0003  
                ___lwmod@divisor 0077                  ___lwmod@counter 007B                         stringdir 0003  
                       stringtab 0003  
