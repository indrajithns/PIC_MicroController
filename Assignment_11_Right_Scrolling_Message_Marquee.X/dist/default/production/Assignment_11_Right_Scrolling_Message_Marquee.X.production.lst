

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Dec 25 20:14:57 2024

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,space=0,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    12                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18     0000                     
    19                           ; Version 2.20
    20                           ; Generated 12/02/2020 GMT
    21                           ; 
    22                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0004                     fsr             equ	4
    54     0004                     fsr0            equ	4
    55     0000                     indf            equ	0
    56     0000                     indf0           equ	0
    57     0002                     pc              equ	2
    58     0002                     pcl             equ	2
    59     000A                     pclath          equ	10
    60     0003                     status          equ	3
    61     0000                     INDF            equ	0	;# 
    62     0001                     TMR0            equ	1	;# 
    63     0002                     PCL             equ	2	;# 
    64     0003                     STATUS          equ	3	;# 
    65     0004                     FSR             equ	4	;# 
    66     0005                     PORTA           equ	5	;# 
    67     0006                     PORTB           equ	6	;# 
    68     0007                     PORTC           equ	7	;# 
    69     0008                     PORTD           equ	8	;# 
    70     0009                     PORTE           equ	9	;# 
    71     000A                     PCLATH          equ	10	;# 
    72     000B                     INTCON          equ	11	;# 
    73     000C                     PIR1            equ	12	;# 
    74     000D                     PIR2            equ	13	;# 
    75     000E                     TMR1            equ	14	;# 
    76     000E                     TMR1L           equ	14	;# 
    77     000F                     TMR1H           equ	15	;# 
    78     0010                     T1CON           equ	16	;# 
    79     0011                     TMR2            equ	17	;# 
    80     0012                     T2CON           equ	18	;# 
    81     0013                     SSPBUF          equ	19	;# 
    82     0014                     SSPCON          equ	20	;# 
    83     0015                     CCPR1           equ	21	;# 
    84     0015                     CCPR1L          equ	21	;# 
    85     0016                     CCPR1H          equ	22	;# 
    86     0017                     CCP1CON         equ	23	;# 
    87     0018                     RCSTA           equ	24	;# 
    88     0019                     TXREG           equ	25	;# 
    89     001A                     RCREG           equ	26	;# 
    90     001B                     CCPR2           equ	27	;# 
    91     001B                     CCPR2L          equ	27	;# 
    92     001C                     CCPR2H          equ	28	;# 
    93     001D                     CCP2CON         equ	29	;# 
    94     001E                     ADRESH          equ	30	;# 
    95     001F                     ADCON0          equ	31	;# 
    96     0081                     OPTION_REG      equ	129	;# 
    97     0085                     TRISA           equ	133	;# 
    98     0086                     TRISB           equ	134	;# 
    99     0087                     TRISC           equ	135	;# 
   100     0088                     TRISD           equ	136	;# 
   101     0089                     TRISE           equ	137	;# 
   102     008C                     PIE1            equ	140	;# 
   103     008D                     PIE2            equ	141	;# 
   104     008E                     PCON            equ	142	;# 
   105     0091                     SSPCON2         equ	145	;# 
   106     0092                     PR2             equ	146	;# 
   107     0093                     SSPADD          equ	147	;# 
   108     0094                     SSPSTAT         equ	148	;# 
   109     0098                     TXSTA           equ	152	;# 
   110     0099                     SPBRG           equ	153	;# 
   111     009C                     CMCON           equ	156	;# 
   112     009D                     CVRCON          equ	157	;# 
   113     009E                     ADRESL          equ	158	;# 
   114     009F                     ADCON1          equ	159	;# 
   115     010C                     EEDATA          equ	268	;# 
   116     010D                     EEADR           equ	269	;# 
   117     010E                     EEDATH          equ	270	;# 
   118     010F                     EEADRH          equ	271	;# 
   119     018C                     EECON1          equ	396	;# 
   120     018D                     EECON2          equ	397	;# 
   121     0000                     INDF            equ	0	;# 
   122     0001                     TMR0            equ	1	;# 
   123     0002                     PCL             equ	2	;# 
   124     0003                     STATUS          equ	3	;# 
   125     0004                     FSR             equ	4	;# 
   126     0005                     PORTA           equ	5	;# 
   127     0006                     PORTB           equ	6	;# 
   128     0007                     PORTC           equ	7	;# 
   129     0008                     PORTD           equ	8	;# 
   130     0009                     PORTE           equ	9	;# 
   131     000A                     PCLATH          equ	10	;# 
   132     000B                     INTCON          equ	11	;# 
   133     000C                     PIR1            equ	12	;# 
   134     000D                     PIR2            equ	13	;# 
   135     000E                     TMR1            equ	14	;# 
   136     000E                     TMR1L           equ	14	;# 
   137     000F                     TMR1H           equ	15	;# 
   138     0010                     T1CON           equ	16	;# 
   139     0011                     TMR2            equ	17	;# 
   140     0012                     T2CON           equ	18	;# 
   141     0013                     SSPBUF          equ	19	;# 
   142     0014                     SSPCON          equ	20	;# 
   143     0015                     CCPR1           equ	21	;# 
   144     0015                     CCPR1L          equ	21	;# 
   145     0016                     CCPR1H          equ	22	;# 
   146     0017                     CCP1CON         equ	23	;# 
   147     0018                     RCSTA           equ	24	;# 
   148     0019                     TXREG           equ	25	;# 
   149     001A                     RCREG           equ	26	;# 
   150     001B                     CCPR2           equ	27	;# 
   151     001B                     CCPR2L          equ	27	;# 
   152     001C                     CCPR2H          equ	28	;# 
   153     001D                     CCP2CON         equ	29	;# 
   154     001E                     ADRESH          equ	30	;# 
   155     001F                     ADCON0          equ	31	;# 
   156     0081                     OPTION_REG      equ	129	;# 
   157     0085                     TRISA           equ	133	;# 
   158     0086                     TRISB           equ	134	;# 
   159     0087                     TRISC           equ	135	;# 
   160     0088                     TRISD           equ	136	;# 
   161     0089                     TRISE           equ	137	;# 
   162     008C                     PIE1            equ	140	;# 
   163     008D                     PIE2            equ	141	;# 
   164     008E                     PCON            equ	142	;# 
   165     0091                     SSPCON2         equ	145	;# 
   166     0092                     PR2             equ	146	;# 
   167     0093                     SSPADD          equ	147	;# 
   168     0094                     SSPSTAT         equ	148	;# 
   169     0098                     TXSTA           equ	152	;# 
   170     0099                     SPBRG           equ	153	;# 
   171     009C                     CMCON           equ	156	;# 
   172     009D                     CVRCON          equ	157	;# 
   173     009E                     ADRESL          equ	158	;# 
   174     009F                     ADCON1          equ	159	;# 
   175     010C                     EEDATA          equ	268	;# 
   176     010D                     EEADR           equ	269	;# 
   177     010E                     EEDATH          equ	270	;# 
   178     010F                     EEADRH          equ	271	;# 
   179     018C                     EECON1          equ	396	;# 
   180     018D                     EECON2          equ	397	;# 
   181     0000                     INDF            equ	0	;# 
   182     0001                     TMR0            equ	1	;# 
   183     0002                     PCL             equ	2	;# 
   184     0003                     STATUS          equ	3	;# 
   185     0004                     FSR             equ	4	;# 
   186     0005                     PORTA           equ	5	;# 
   187     0006                     PORTB           equ	6	;# 
   188     0007                     PORTC           equ	7	;# 
   189     0008                     PORTD           equ	8	;# 
   190     0009                     PORTE           equ	9	;# 
   191     000A                     PCLATH          equ	10	;# 
   192     000B                     INTCON          equ	11	;# 
   193     000C                     PIR1            equ	12	;# 
   194     000D                     PIR2            equ	13	;# 
   195     000E                     TMR1            equ	14	;# 
   196     000E                     TMR1L           equ	14	;# 
   197     000F                     TMR1H           equ	15	;# 
   198     0010                     T1CON           equ	16	;# 
   199     0011                     TMR2            equ	17	;# 
   200     0012                     T2CON           equ	18	;# 
   201     0013                     SSPBUF          equ	19	;# 
   202     0014                     SSPCON          equ	20	;# 
   203     0015                     CCPR1           equ	21	;# 
   204     0015                     CCPR1L          equ	21	;# 
   205     0016                     CCPR1H          equ	22	;# 
   206     0017                     CCP1CON         equ	23	;# 
   207     0018                     RCSTA           equ	24	;# 
   208     0019                     TXREG           equ	25	;# 
   209     001A                     RCREG           equ	26	;# 
   210     001B                     CCPR2           equ	27	;# 
   211     001B                     CCPR2L          equ	27	;# 
   212     001C                     CCPR2H          equ	28	;# 
   213     001D                     CCP2CON         equ	29	;# 
   214     001E                     ADRESH          equ	30	;# 
   215     001F                     ADCON0          equ	31	;# 
   216     0081                     OPTION_REG      equ	129	;# 
   217     0085                     TRISA           equ	133	;# 
   218     0086                     TRISB           equ	134	;# 
   219     0087                     TRISC           equ	135	;# 
   220     0088                     TRISD           equ	136	;# 
   221     0089                     TRISE           equ	137	;# 
   222     008C                     PIE1            equ	140	;# 
   223     008D                     PIE2            equ	141	;# 
   224     008E                     PCON            equ	142	;# 
   225     0091                     SSPCON2         equ	145	;# 
   226     0092                     PR2             equ	146	;# 
   227     0093                     SSPADD          equ	147	;# 
   228     0094                     SSPSTAT         equ	148	;# 
   229     0098                     TXSTA           equ	152	;# 
   230     0099                     SPBRG           equ	153	;# 
   231     009C                     CMCON           equ	156	;# 
   232     009D                     CVRCON          equ	157	;# 
   233     009E                     ADRESL          equ	158	;# 
   234     009F                     ADCON1          equ	159	;# 
   235     010C                     EEDATA          equ	268	;# 
   236     010D                     EEADR           equ	269	;# 
   237     010E                     EEDATH          equ	270	;# 
   238     010F                     EEADRH          equ	271	;# 
   239     018C                     EECON1          equ	396	;# 
   240     018D                     EECON2          equ	397	;# 
   241                           
   242                           	psect	idataBANK0
   243     06A1                     __pidataBANK0:
   244                           
   245                           ;initializer for main@F989
   246     06A1  345F               	retlw	95
   247     06A2  345F               	retlw	95
   248     06A3  3447               	retlw	71
   249     06A4  344F               	retlw	79
   250     06A5  344F               	retlw	79
   251     06A6  3444               	retlw	68
   252     06A7  3420               	retlw	32
   253     06A8  344D               	retlw	77
   254     06A9  344F               	retlw	79
   255     06AA  3452               	retlw	82
   256     06AB  344E               	retlw	78
   257     06AC  3449               	retlw	73
   258     06AD  344E               	retlw	78
   259     06AE  3447               	retlw	71
   260     06AF  345F               	retlw	95
   261     06B0  345F               	retlw	95
   262     06B1  3400               	retlw	0
   263     0008                     _PORTD          set	8
   264     0049                     _RE1            set	73
   265     004A                     _RE2            set	74
   266     0088                     _TRISD          set	136
   267     0449                     _TRISE1         set	1097
   268     044A                     _TRISE2         set	1098
   269                           
   270                           	psect	strings
   271     0003                     __pstrings:
   272     0003                     stringtab:
   273     0003                     __stringtab:
   274                           
   275                           ;	String table - string pointers are 1 byte each
   276     0003  1BFF               	btfsc	btemp+1,7
   277     0004  280D               	ljmp	stringcode
   278     0005  1383               	bcf	3,7
   279     0006  187F               	btfsc	btemp+1,0
   280     0007  1783               	bsf	3,7
   281     0008  0800               	movf	0,w
   282     0009  0A84               	incf	4,f
   283     000A  1903               	skipnz
   284     000B  0AFF               	incf	btemp+1,f
   285     000C  0008               	return
   286     000D                     stringcode:
   287     000D                     stringdir:
   288     000D  3000               	movlw	high stringdir
   289     000E  008A               	movwf	10
   290     000F  0804               	movf	4,w
   291     0010  0A84               	incf	4,f
   292     0011  0782               	addwf	2,f
   293     0012                     __stringbase:
   294     0012  3400               	retlw	0
   295     0013                     __end_of__stringtab:
   296     0013                     STR_1:
   297     0013  3452               	retlw	82	;'R'
   298     0014  3469               	retlw	105	;'i'
   299     0015  3467               	retlw	103	;'g'
   300     0016  3468               	retlw	104	;'h'
   301     0017  3474               	retlw	116	;'t'
   302     0018  3420               	retlw	32	;' '
   303     0019  3453               	retlw	83	;'S'
   304     001A  3463               	retlw	99	;'c'
   305     001B  3472               	retlw	114	;'r'
   306     001C  346F               	retlw	111	;'o'
   307     001D  346C               	retlw	108	;'l'
   308     001E  346C               	retlw	108	;'l'
   309     001F  3469               	retlw	105	;'i'
   310     0020  346E               	retlw	110	;'n'
   311     0021  3467               	retlw	103	;'g'
   312     0022  3400               	retlw	0
   313                           
   314                           	psect	cinit
   315     07EE                     start_initialization:	
   316                           ; #config settings
   317                           
   318     07EE                     __initialization:
   319                           
   320                           ; Initialize objects allocated to BANK0
   321     07EE  1383               	bcf	3,7	;select IRP bank0
   322     07EF  3045               	movlw	low (__pdataBANK0+17)
   323     07F0  00FD               	movwf	btemp+-1
   324     07F1  3006               	movlw	high __pidataBANK0
   325     07F2  00FE               	movwf	btemp
   326     07F3  30A1               	movlw	low __pidataBANK0
   327     07F4  00FF               	movwf	btemp+1
   328     07F5  3034               	movlw	low __pdataBANK0
   329     07F6  0084               	movwf	4
   330     07F7  120A  118A  26B6  120A  118A  	fcall	init_ram0
   331     07FC                     end_of_initialization:	
   332                           ;End of C runtime variable initialization code
   333                           
   334     07FC                     __end_of__initialization:
   335     07FC  0183               	clrf	3
   336     07FD  120A  118A  2F2A   	ljmp	_main	;jump to C main() function
   337                           
   338                           	psect	dataBANK0
   339     0034                     __pdataBANK0:
   340     0034                     main@F989:
   341     0034                     	ds	17
   342                           
   343                           	psect	inittext
   344     06B2                     init_fetch0:	
   345                           ;	Called with low address in FSR and high address in W
   346                           
   347     06B2  087E               	movf	btemp,w
   348     06B3  008A               	movwf	10
   349     06B4  087F               	movf	btemp+1,w
   350     06B5  0082               	movwf	2
   351     06B6                     init_ram0:	
   352                           ;Called with:
   353                           ;	high address of idata address in btemp 
   354                           ;	low address of idata address in btemp+1 
   355                           ;	low address of data in FSR
   356                           ;	high address + 1 of data in btemp-1
   357                           
   358     06B6  120A  118A  26B2  120A  118A  	fcall	init_fetch0
   359     06BB  0080               	movwf	0
   360     06BC  0A84               	incf	4,f
   361     06BD  0804               	movf	4,w
   362     06BE  067D               	xorwf	btemp+-1,w
   363     06BF  1903               	btfsc	3,2
   364     06C0  3400               	retlw	0
   365     06C1  0AFF               	incf	btemp+1,f
   366     06C2  1903               	btfsc	3,2
   367     06C3  0AFE               	incf	btemp,f
   368     06C4  2EB6               	goto	init_ram0
   369                           
   370                           	psect	cstackCOMMON
   371     0070                     __pcstackCOMMON:
   372     0070                     ?_init_clcd:
   373     0070                     ?_main:	
   374                           ; 1 bytes @ 0x0
   375                           
   376     0070                     ?_clcd_write:	
   377                           ; 1 bytes @ 0x0
   378                           
   379     0070                     ?_init_display_controller:	
   380                           ; 1 bytes @ 0x0
   381                           
   382     0070                     clcd_write@mode:	
   383                           ; 1 bytes @ 0x0
   384                           
   385                           
   386                           ; 1 bytes @ 0x0
   387     0070                     	ds	1
   388     0071                     ??_clcd_write:
   389                           
   390                           ; 1 bytes @ 0x1
   391     0071                     	ds	2
   392     0073                     clcd_write@byte:
   393                           
   394                           ; 1 bytes @ 0x3
   395     0073                     	ds	1
   396     0074                     ?_clcd_print:
   397     0074                     clcd_print@str:	
   398                           ; 1 bytes @ 0x4
   399                           
   400     0074                     ??_init_display_controller:	
   401                           ; 2 bytes @ 0x4
   402                           
   403                           
   404                           ; 1 bytes @ 0x4
   405     0074                     	ds	2
   406     0076                     clcd_print@addr:
   407     0076                     ??_init_clcd:	
   408                           ; 1 bytes @ 0x6
   409                           
   410                           
   411                           ; 1 bytes @ 0x6
   412     0076                     	ds	1
   413     0077                     ??_clcd_print:
   414     0077                     ??_main:	
   415                           ; 1 bytes @ 0x7
   416                           
   417                           
   418                           ; 1 bytes @ 0x7
   419     0077                     	ds	4
   420                           
   421                           	psect	cstackBANK0
   422     0020                     __pcstackBANK0:
   423     0020                     main@msg:
   424                           
   425                           ; 17 bytes @ 0x0
   426     0020                     	ds	17
   427     0031                     main@temp:
   428                           
   429                           ; 1 bytes @ 0x11
   430     0031                     	ds	1
   431     0032                     main@i:
   432                           
   433                           ; 2 bytes @ 0x12
   434     0032                     	ds	2
   435                           
   436                           	psect	maintext
   437     072A                     __pmaintext:	
   438 ;;
   439 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   440 ;;
   441 ;; *************** function _main *****************
   442 ;; Defined at:
   443 ;;		line 14 in file "main.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;		None
   446 ;; Auto vars:     Size  Location     Type
   447 ;;  i               2   18[BANK0 ] int 
   448 ;;  msg            17    0[BANK0 ] unsigned char [17]
   449 ;;  temp            1   17[BANK0 ] unsigned char 
   450 ;; Return value:  Size  Location     Type
   451 ;;                  1    wreg      void 
   452 ;; Registers used:
   453 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   454 ;; Tracked objects:
   455 ;;		On entry : B00/0
   456 ;;		On exit  : 0/0
   457 ;;		Unchanged: 0/0
   458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   459 ;;      Params:         0       0       0       0       0
   460 ;;      Locals:         0      20       0       0       0
   461 ;;      Temps:          4       0       0       0       0
   462 ;;      Totals:         4      20       0       0       0
   463 ;;Total ram usage:       24 bytes
   464 ;; Hardware stack levels required when called: 3
   465 ;; This function calls:
   466 ;;		_clcd_print
   467 ;;		_init_clcd
   468 ;; This function is called by:
   469 ;;		Startup code after reset
   470 ;; This function uses a non-reentrant model
   471 ;;
   472                           
   473     072A                     _main:	
   474                           ;psect for function _main
   475                           
   476     072A                     l731:	
   477                           ;incstack = 0
   478                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   479                           
   480                           
   481                           ;main.c: 15:     return;
   482     072A  120A  118A  2696  120A  118A  	fcall	_init_clcd
   483     072F                     l733:
   484     072F  3034               	movlw	main@F989& (0+255)
   485     0730  0084               	movwf	4
   486     0731  3020               	movlw	low main@msg
   487     0732  00F7               	movwf	??_main
   488     0733  3011               	movlw	17
   489     0734  00F8               	movwf	??_main+1
   490     0735                     u110:
   491     0735  1383               	bcf	3,7	;select IRP bank0
   492     0736  0800               	movf	0,w
   493     0737  00F9               	movwf	??_main+2
   494     0738  0A04               	incf	4,w
   495     0739  00FA               	movwf	??_main+3
   496     073A  0877               	movf	??_main,w
   497     073B  0084               	movwf	4
   498     073C  0879               	movf	??_main+2,w
   499     073D  0080               	movwf	0
   500     073E  0A04               	incf	4,w
   501     073F  00F7               	movwf	??_main
   502     0740  087A               	movf	??_main+3,w
   503     0741  0084               	movwf	4
   504     0742  0BF8               	decfsz	??_main+1,f
   505     0743  2F35               	goto	u110
   506     0744                     l735:
   507     0744  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   508     0745  00F4               	movwf	clcd_print@str
   509     0746  3080               	movlw	128
   510     0747  00F5               	movwf	clcd_print@str+1
   511     0748  3080               	movlw	128
   512     0749  00F6               	movwf	clcd_print@addr
   513     074A  120A  118A  26C5  120A  118A  	fcall	_clcd_print
   514     074F                     l737:
   515     074F  1283               	bcf	3,5	;RP0=0, select bank0
   516     0750  1303               	bcf	3,6	;RP1=0, select bank0
   517     0751  082F               	movf	main@msg+15,w
   518     0752  00B1               	movwf	main@temp
   519     0753                     l739:
   520     0753  300F               	movlw	15
   521     0754  00B2               	movwf	main@i
   522     0755  3000               	movlw	0
   523     0756  00B3               	movwf	main@i+1
   524     0757                     l743:
   525     0757  1283               	bcf	3,5	;RP0=0, select bank0
   526     0758  1303               	bcf	3,6	;RP1=0, select bank0
   527     0759  0832               	movf	main@i,w
   528     075A  3EFF               	addlw	255
   529     075B  3E20               	addlw	(low (main@msg| 0))& (0+255)
   530     075C  0084               	movwf	4
   531     075D  1383               	bcf	3,7	;select IRP bank0
   532     075E  0800               	movf	0,w
   533     075F  00FF               	movwf	btemp+1
   534     0760  0832               	movf	main@i,w
   535     0761  3E20               	addlw	(low (main@msg| 0))& (0+255)
   536     0762  0084               	movwf	4
   537     0763  087F               	movf	btemp+1,w
   538     0764  0080               	movwf	0
   539     0765                     l745:
   540     0765  30FF               	movlw	255
   541     0766  07B2               	addwf	main@i,f
   542     0767  1803               	skipnc
   543     0768  0AB3               	incf	main@i+1,f
   544     0769  30FF               	movlw	255
   545     076A  07B3               	addwf	main@i+1,f
   546     076B                     l747:
   547     076B  0833               	movf	main@i+1,w
   548     076C  3A80               	xorlw	128
   549     076D  00FF               	movwf	btemp+1
   550     076E  3080               	movlw	128
   551     076F  027F               	subwf	btemp+1,w
   552     0770  1D03               	skipz
   553     0771  2F74               	goto	u125
   554     0772  3001               	movlw	1
   555     0773  0232               	subwf	main@i,w
   556     0774                     u125:
   557     0774  1803               	skipnc
   558     0775  2F77               	goto	u121
   559     0776  2F78               	goto	u120
   560     0777                     u121:
   561     0777  2F57               	goto	l743
   562     0778                     u120:
   563     0778                     l749:
   564     0778  1283               	bcf	3,5	;RP0=0, select bank0
   565     0779  1303               	bcf	3,6	;RP1=0, select bank0
   566     077A  0831               	movf	main@temp,w
   567     077B  00A0               	movwf	main@msg
   568     077C                     l751:
   569     077C  3020               	movlw	(low (main@msg| 0))& (0+255)
   570     077D  00F4               	movwf	clcd_print@str
   571     077E  3000               	movlw	0
   572     077F  00F5               	movwf	clcd_print@str+1
   573     0780  30C0               	movlw	192
   574     0781  00F6               	movwf	clcd_print@addr
   575     0782  120A  118A  26C5  120A  118A  	fcall	_clcd_print
   576     0787  2F4F               	goto	l737
   577     0788  120A  118A  2800   	ljmp	start
   578     078B                     __end_of_main:
   579                           
   580                           	psect	text1
   581     0696                     __ptext1:	
   582 ;; *************** function _init_clcd *****************
   583 ;; Defined at:
   584 ;;		line 50 in file "clcd.c"
   585 ;; Parameters:    Size  Location     Type
   586 ;;		None
   587 ;; Auto vars:     Size  Location     Type
   588 ;;		None
   589 ;; Return value:  Size  Location     Type
   590 ;;                  1    wreg      void 
   591 ;; Registers used:
   592 ;;		wreg, status,2, status,0, pclath, cstack
   593 ;; Tracked objects:
   594 ;;		On entry : 0/0
   595 ;;		On exit  : 0/0
   596 ;;		Unchanged: 0/0
   597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   598 ;;      Params:         0       0       0       0       0
   599 ;;      Locals:         0       0       0       0       0
   600 ;;      Temps:          0       0       0       0       0
   601 ;;      Totals:         0       0       0       0       0
   602 ;;Total ram usage:        0 bytes
   603 ;; Hardware stack levels used: 1
   604 ;; Hardware stack levels required when called: 2
   605 ;; This function calls:
   606 ;;		_init_display_controller
   607 ;; This function is called by:
   608 ;;		_main
   609 ;; This function uses a non-reentrant model
   610 ;;
   611                           
   612     0696                     _init_clcd:	
   613                           ;psect for function _init_clcd
   614                           
   615     0696                     l715:	
   616                           ;incstack = 0
   617                           ; Regs used in _init_clcd: [wreg+status,2+status,0+pclath+cstack]
   618                           
   619                           
   620                           ;clcd.c: 53:     TRISD = 0x00;
   621     0696  1683               	bsf	3,5	;RP0=1, select bank1
   622     0697  1303               	bcf	3,6	;RP1=0, select bank1
   623     0698  0188               	clrf	8	;volatile
   624     0699                     l717:
   625                           
   626                           ;clcd.c: 56:     TRISE2 = 0;
   627     0699  1109               	bcf	9,2	;volatile
   628     069A                     l719:
   629                           
   630                           ;clcd.c: 57:     TRISE1 = 0;
   631     069A  1089               	bcf	9,1	;volatile
   632     069B                     l721:
   633                           
   634                           ;clcd.c: 59:     init_display_controller();
   635     069B  120A  118A  278B  120A  118A  	fcall	_init_display_controller
   636     06A0                     l39:
   637     06A0  0008               	return
   638     06A1                     __end_of_init_clcd:
   639                           
   640                           	psect	text2
   641     078B                     __ptext2:	
   642 ;; *************** function _init_display_controller *****************
   643 ;; Defined at:
   644 ;;		line 27 in file "clcd.c"
   645 ;; Parameters:    Size  Location     Type
   646 ;;		None
   647 ;; Auto vars:     Size  Location     Type
   648 ;;		None
   649 ;; Return value:  Size  Location     Type
   650 ;;                  1    wreg      void 
   651 ;; Registers used:
   652 ;;		wreg, status,2, status,0, pclath, cstack
   653 ;; Tracked objects:
   654 ;;		On entry : 0/0
   655 ;;		On exit  : 0/0
   656 ;;		Unchanged: 0/0
   657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   658 ;;      Params:         0       0       0       0       0
   659 ;;      Locals:         0       0       0       0       0
   660 ;;      Temps:          2       0       0       0       0
   661 ;;      Totals:         2       0       0       0       0
   662 ;;Total ram usage:        2 bytes
   663 ;; Hardware stack levels used: 1
   664 ;; Hardware stack levels required when called: 1
   665 ;; This function calls:
   666 ;;		_clcd_write
   667 ;; This function is called by:
   668 ;;		_init_clcd
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672     078B                     _init_display_controller:	
   673                           ;psect for function _init_display_controller
   674                           
   675     078B                     l691:	
   676                           ;incstack = 0
   677                           ; Regs used in _init_display_controller: [wreg+status,2+status,0+pclath+cstack]
   678                           
   679                           
   680                           ;clcd.c: 30:     _delay((unsigned long)((30)*(20000000/4000.0)));
   681     078B  30C3               	movlw	195
   682     078C  00F5               	movwf	??_init_display_controller+1
   683     078D  30CD               	movlw	205
   684     078E  00F4               	movwf	??_init_display_controller
   685     078F                     u137:
   686     078F  0BF4               	decfsz	??_init_display_controller,f
   687     0790  2F8F               	goto	u137
   688     0791  0BF5               	decfsz	??_init_display_controller+1,f
   689     0792  2F8F               	goto	u137
   690     0793                     l693:
   691                           
   692                           ;clcd.c: 33:     clcd_write(0x33, 0);
   693     0793  01F0               	clrf	clcd_write@mode
   694     0794  3033               	movlw	51
   695     0795  120A  118A  26F4  120A  118A  	fcall	_clcd_write
   696     079A                     l695:
   697                           
   698                           ;clcd.c: 34:     _delay((unsigned long)((4100)*(20000000/4000000.0)));
   699     079A  301B               	movlw	27
   700     079B  00F5               	movwf	??_init_display_controller+1
   701     079C  309E               	movlw	158
   702     079D  00F4               	movwf	??_init_display_controller
   703     079E                     u147:
   704     079E  0BF4               	decfsz	??_init_display_controller,f
   705     079F  2F9E               	goto	u147
   706     07A0  0BF5               	decfsz	??_init_display_controller+1,f
   707     07A1  2F9E               	goto	u147
   708     07A2  0000               	nop
   709                           
   710                           ;clcd.c: 35:     clcd_write(0x33, 0);
   711     07A3  01F0               	clrf	clcd_write@mode
   712     07A4  3033               	movlw	51
   713     07A5  120A  118A  26F4  120A  118A  	fcall	_clcd_write
   714     07AA                     l697:
   715                           
   716                           ;clcd.c: 36:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   717     07AA  30A6               	movlw	166
   718     07AB  00F4               	movwf	??_init_display_controller
   719     07AC                     u157:
   720     07AC  0BF4               	decfsz	??_init_display_controller,f
   721     07AD  2FAC               	goto	u157
   722     07AE  0000               	nop
   723     07AF                     l699:
   724                           
   725                           ;clcd.c: 37:     clcd_write(0x33, 0);
   726     07AF  01F0               	clrf	clcd_write@mode
   727     07B0  3033               	movlw	51
   728     07B1  120A  118A  26F4  120A  118A  	fcall	_clcd_write
   729     07B6                     l701:
   730                           
   731                           ;clcd.c: 38:     _delay((unsigned long)((1)*(20000000/4000000.0)));
   732     07B6  2FB7               	nop2	;2 cycle nop
   733     07B7  2FB8               	nop2	;2 cycle nop
   734     07B8  0000               	nop
   735     07B9                     l703:
   736                           
   737                           ;clcd.c: 40:     clcd_write(0x02, 0);
   738     07B9  01F0               	clrf	clcd_write@mode
   739     07BA  3002               	movlw	2
   740     07BB  120A  118A  26F4  120A  118A  	fcall	_clcd_write
   741     07C0                     l705:
   742                           
   743                           ;clcd.c: 41:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   744     07C0  30A6               	movlw	166
   745     07C1  00F4               	movwf	??_init_display_controller
   746     07C2                     u167:
   747     07C2  0BF4               	decfsz	??_init_display_controller,f
   748     07C3  2FC2               	goto	u167
   749     07C4  0000               	nop
   750                           
   751                           ;clcd.c: 42:     clcd_write(0x28, 0);
   752     07C5  01F0               	clrf	clcd_write@mode
   753     07C6  3028               	movlw	40
   754     07C7  120A  118A  26F4  120A  118A  	fcall	_clcd_write
   755     07CC                     l707:
   756                           
   757                           ;clcd.c: 43:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   758     07CC  30A6               	movlw	166
   759     07CD  00F4               	movwf	??_init_display_controller
   760     07CE                     u177:
   761     07CE  0BF4               	decfsz	??_init_display_controller,f
   762     07CF  2FCE               	goto	u177
   763     07D0  0000               	nop
   764     07D1                     l709:
   765                           
   766                           ;clcd.c: 44:     clcd_write(0x01, 0);
   767     07D1  01F0               	clrf	clcd_write@mode
   768     07D2  3001               	movlw	1
   769     07D3  120A  118A  26F4  120A  118A  	fcall	_clcd_write
   770                           
   771                           ;clcd.c: 45:     _delay((unsigned long)((500)*(20000000/4000000.0)));
   772     07D8  3004               	movlw	4
   773     07D9  00F5               	movwf	??_init_display_controller+1
   774     07DA  303D               	movlw	61
   775     07DB  00F4               	movwf	??_init_display_controller
   776     07DC                     u187:
   777     07DC  0BF4               	decfsz	??_init_display_controller,f
   778     07DD  2FDC               	goto	u187
   779     07DE  0BF5               	decfsz	??_init_display_controller+1,f
   780     07DF  2FDC               	goto	u187
   781     07E0  2FE1               	nop2
   782     07E1                     l711:
   783                           
   784                           ;clcd.c: 46:     clcd_write(0x0C, 0);
   785     07E1  01F0               	clrf	clcd_write@mode
   786     07E2  300C               	movlw	12
   787     07E3  120A  118A  26F4  120A  118A  	fcall	_clcd_write
   788     07E8                     l713:
   789                           
   790                           ;clcd.c: 47:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   791     07E8  30A6               	movlw	166
   792     07E9  00F4               	movwf	??_init_display_controller
   793     07EA                     u197:
   794     07EA  0BF4               	decfsz	??_init_display_controller,f
   795     07EB  2FEA               	goto	u197
   796     07EC  0000               	nop
   797     07ED                     l36:
   798     07ED  0008               	return
   799     07EE                     __end_of_init_display_controller:
   800                           
   801                           	psect	text3
   802     06C5                     __ptext3:	
   803 ;; *************** function _clcd_print *****************
   804 ;; Defined at:
   805 ;;		line 62 in file "clcd.c"
   806 ;; Parameters:    Size  Location     Type
   807 ;;  str             2    4[COMMON] PTR const unsigned char 
   808 ;;		 -> STR_1(16), main@msg(17), 
   809 ;;  addr            1    6[COMMON] unsigned char 
   810 ;; Auto vars:     Size  Location     Type
   811 ;;		None
   812 ;; Return value:  Size  Location     Type
   813 ;;                  1    wreg      void 
   814 ;; Registers used:
   815 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   816 ;; Tracked objects:
   817 ;;		On entry : 0/0
   818 ;;		On exit  : 0/0
   819 ;;		Unchanged: 0/0
   820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   821 ;;      Params:         3       0       0       0       0
   822 ;;      Locals:         0       0       0       0       0
   823 ;;      Temps:          0       0       0       0       0
   824 ;;      Totals:         3       0       0       0       0
   825 ;;Total ram usage:        3 bytes
   826 ;; Hardware stack levels used: 1
   827 ;; Hardware stack levels required when called: 1
   828 ;; This function calls:
   829 ;;		_clcd_write
   830 ;; This function is called by:
   831 ;;		_main
   832 ;; This function uses a non-reentrant model
   833 ;;
   834                           
   835     06C5                     _clcd_print:	
   836                           ;psect for function _clcd_print
   837                           
   838     06C5                     l723:	
   839                           ;incstack = 0
   840                           ; Regs used in _clcd_print: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   841                           
   842                           
   843                           ;clcd.c: 62: void clcd_print(const char *str, unsigned char addr);clcd.c: 63: {;clcd.c: 
      +                          64:     clcd_write(addr, 0);
   844     06C5  01F0               	clrf	clcd_write@mode
   845     06C6  0876               	movf	clcd_print@addr,w
   846     06C7  120A  118A  26F4  120A  118A  	fcall	_clcd_write
   847                           
   848                           ;clcd.c: 66:     while (*str != '\0')
   849     06CC  2EE3               	goto	l729
   850     06CD                     l725:
   851                           
   852                           ;clcd.c: 67:     {;clcd.c: 68:         clcd_write(*str, 1);
   853     06CD  01F0               	clrf	clcd_write@mode
   854     06CE  0AF0               	incf	clcd_write@mode,f
   855     06CF  0875               	movf	clcd_print@str+1,w
   856     06D0  00FF               	movwf	btemp+1
   857     06D1  0874               	movf	clcd_print@str,w
   858     06D2  0084               	movwf	4
   859     06D3  120A  118A  2003  120A  118A  	fcall	stringtab
   860     06D8  120A  118A  26F4  120A  118A  	fcall	_clcd_write
   861     06DD                     l727:
   862                           
   863                           ;clcd.c: 69:         str++;
   864     06DD  3001               	movlw	1
   865     06DE  07F4               	addwf	clcd_print@str,f
   866     06DF  1803               	skipnc
   867     06E0  0AF5               	incf	clcd_print@str+1,f
   868     06E1  3000               	movlw	0
   869     06E2  07F5               	addwf	clcd_print@str+1,f
   870     06E3                     l729:
   871                           
   872                           ;clcd.c: 66:     while (*str != '\0')
   873     06E3  0875               	movf	clcd_print@str+1,w
   874     06E4  1283               	bcf	3,5	;RP0=0, select bank0
   875     06E5  1303               	bcf	3,6	;RP1=0, select bank0
   876     06E6  00FF               	movwf	btemp+1
   877     06E7  0874               	movf	clcd_print@str,w
   878     06E8  0084               	movwf	4
   879     06E9  120A  118A  2003  120A  118A  	fcall	stringtab
   880     06EE  3A00               	xorlw	0
   881     06EF  1D03               	skipz
   882     06F0  2EF2               	goto	u101
   883     06F1  2EF3               	goto	u100
   884     06F2                     u101:
   885     06F2  2ECD               	goto	l725
   886     06F3                     u100:
   887     06F3                     l45:
   888     06F3  0008               	return
   889     06F4                     __end_of_clcd_print:
   890                           
   891                           	psect	text4
   892     06F4                     __ptext4:	
   893 ;; *************** function _clcd_write *****************
   894 ;; Defined at:
   895 ;;		line 10 in file "clcd.c"
   896 ;; Parameters:    Size  Location     Type
   897 ;;  byte            1    wreg     unsigned char 
   898 ;;  mode            1    0[COMMON] unsigned char 
   899 ;; Auto vars:     Size  Location     Type
   900 ;;  byte            1    3[COMMON] unsigned char 
   901 ;; Return value:  Size  Location     Type
   902 ;;                  1    wreg      void 
   903 ;; Registers used:
   904 ;;		wreg, status,2, status,0
   905 ;; Tracked objects:
   906 ;;		On entry : 0/0
   907 ;;		On exit  : 0/0
   908 ;;		Unchanged: 0/0
   909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   910 ;;      Params:         1       0       0       0       0
   911 ;;      Locals:         1       0       0       0       0
   912 ;;      Temps:          2       0       0       0       0
   913 ;;      Totals:         4       0       0       0       0
   914 ;;Total ram usage:        4 bytes
   915 ;; Hardware stack levels used: 1
   916 ;; This function calls:
   917 ;;		Nothing
   918 ;; This function is called by:
   919 ;;		_init_display_controller
   920 ;;		_clcd_print
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924     06F4                     _clcd_write:	
   925                           ;psect for function _clcd_write
   926                           
   927                           
   928                           ;incstack = 0
   929                           ; Regs used in _clcd_write: [wreg+status,2+status,0]
   930                           ;clcd_write@byte stored from wreg
   931     06F4  00F3               	movwf	clcd_write@byte
   932     06F5                     l671:
   933                           
   934                           ;clcd.c: 10: static void clcd_write(unsigned char byte, unsigned char mode);clcd.c: 11: 
      +                          {;clcd.c: 12:     RE2 = mode;
   935     06F5  1870               	btfsc	clcd_write@mode,0
   936     06F6  2EF8               	goto	u71
   937     06F7  2EFC               	goto	u70
   938     06F8                     u71:
   939     06F8  1283               	bcf	3,5	;RP0=0, select bank0
   940     06F9  1303               	bcf	3,6	;RP1=0, select bank0
   941     06FA  1509               	bsf	9,2	;volatile
   942     06FB  2EFF               	goto	u84
   943     06FC                     u70:
   944     06FC  1283               	bcf	3,5	;RP0=0, select bank0
   945     06FD  1303               	bcf	3,6	;RP1=0, select bank0
   946     06FE  1109               	bcf	9,2	;volatile
   947     06FF                     u84:
   948     06FF                     l673:
   949                           
   950                           ;clcd.c: 14:     PORTD = byte & 0xF0;
   951     06FF  0873               	movf	clcd_write@byte,w
   952     0700  39F0               	andlw	240
   953     0701  0088               	movwf	8	;volatile
   954     0702                     l675:
   955                           
   956                           ;clcd.c: 15:     RE1 = 1;
   957     0702  1489               	bsf	9,1	;volatile
   958     0703                     l677:
   959                           
   960                           ;clcd.c: 16:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   961     0703  30A6               	movlw	166
   962     0704  00F1               	movwf	??_clcd_write
   963     0705                     u207:
   964     0705  0BF1               	decfsz	??_clcd_write,f
   965     0706  2F05               	goto	u207
   966     0707  0000               	nop
   967     0708                     l679:
   968                           
   969                           ;clcd.c: 17:     RE1 = 0;
   970     0708  1283               	bcf	3,5	;RP0=0, select bank0
   971     0709  1303               	bcf	3,6	;RP1=0, select bank0
   972     070A  1089               	bcf	9,1	;volatile
   973     070B                     l681:
   974                           
   975                           ;clcd.c: 19:     PORTD = (byte & 0x0F) << 4;
   976     070B  0873               	movf	clcd_write@byte,w
   977     070C  390F               	andlw	15
   978     070D  00F1               	movwf	??_clcd_write
   979     070E  3003               	movlw	3
   980     070F                     u95:
   981     070F  1003               	clrc
   982     0710  0DF1               	rlf	??_clcd_write,f
   983     0711  3EFF               	addlw	-1
   984     0712  1D03               	skipz
   985     0713  2F0F               	goto	u95
   986     0714  1003               	clrc
   987     0715  0D71               	rlf	??_clcd_write,w
   988     0716  0088               	movwf	8	;volatile
   989     0717                     l683:
   990                           
   991                           ;clcd.c: 20:     RE1 = 1;
   992     0717  1489               	bsf	9,1	;volatile
   993     0718                     l685:
   994                           
   995                           ;clcd.c: 21:     _delay((unsigned long)((100)*(20000000/4000000.0)));
   996     0718  30A6               	movlw	166
   997     0719  00F1               	movwf	??_clcd_write
   998     071A                     u217:
   999     071A  0BF1               	decfsz	??_clcd_write,f
  1000     071B  2F1A               	goto	u217
  1001     071C  0000               	nop
  1002     071D                     l687:
  1003                           
  1004                           ;clcd.c: 22:     RE1 = 0;
  1005     071D  1283               	bcf	3,5	;RP0=0, select bank0
  1006     071E  1303               	bcf	3,6	;RP1=0, select bank0
  1007     071F  1089               	bcf	9,1	;volatile
  1008     0720                     l689:
  1009                           
  1010                           ;clcd.c: 24:     _delay((unsigned long)((4100)*(20000000/4000000.0)));
  1011     0720  301B               	movlw	27
  1012     0721  00F2               	movwf	??_clcd_write+1
  1013     0722  309E               	movlw	158
  1014     0723  00F1               	movwf	??_clcd_write
  1015     0724                     u227:
  1016     0724  0BF1               	decfsz	??_clcd_write,f
  1017     0725  2F24               	goto	u227
  1018     0726  0BF2               	decfsz	??_clcd_write+1,f
  1019     0727  2F24               	goto	u227
  1020     0728  0000               	nop
  1021     0729                     l33:
  1022     0729  0008               	return
  1023     072A                     __end_of_clcd_write:
  1024     0002                     ___latbits      equ	2
  1025     007E                     btemp           set	126	;btemp
  1026     007E                     wtemp0          set	126
  1027                           
  1028                           	psect	config
  1029                           
  1030                           ;Config register CONFIG @ 0x2007
  1031                           ;	Oscillator Selection bits
  1032                           ;	FOSC = 0x3, unprogrammed default
  1033                           ;	Watchdog Timer Enable bit
  1034                           ;	WDTE = OFF, WDT disabled
  1035                           ;	Power-up Timer Enable bit
  1036                           ;	PWRTE = 0x1, unprogrammed default
  1037                           ;	Brown-out Reset Enable bit
  1038                           ;	BOREN = 0x1, unprogrammed default
  1039                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1040                           ;	LVP = 0x1, unprogrammed default
  1041                           ;	Data EEPROM Memory Code Protection bit
  1042                           ;	CPD = 0x1, unprogrammed default
  1043                           ;	Flash Program Memory Write Enable bits
  1044                           ;	WRT = 0x3, unprogrammed default
  1045                           ;	In-Circuit Debugger Mode bit
  1046                           ;	DEBUG = 0x1, unprogrammed default
  1047                           ;	Flash Program Memory Code Protection bit
  1048                           ;	CP = 0x1, unprogrammed default
  1049     2007                     	org	8199
  1050     2007  3FFB               	dw	16379

Data Sizes:
    Strings     16
    Constant    0
    Data        17
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80     20      37
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    clcd_print@str	PTR const unsigned char  size(2) Largest target is 17
		 -> main@msg(BANK0[17]), STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_clcd_print
    _init_clcd->_init_display_controller
    _init_display_controller->_clcd_write
    _clcd_print->_clcd_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0     458
                                              7 COMMON     4     4      0
                                              0 BANK0     20    20      0
                         _clcd_print
                          _init_clcd
 ---------------------------------------------------------------------------------
 (1) _init_clcd                                            0     0      0      89
            _init_display_controller
 ---------------------------------------------------------------------------------
 (2) _init_display_controller                              2     2      0      89
                                              4 COMMON     2     2      0
                         _clcd_write
 ---------------------------------------------------------------------------------
 (1) _clcd_print                                           3     0      3     160
                                              4 COMMON     3     0      3
                         _clcd_write
 ---------------------------------------------------------------------------------
 (3) _clcd_write                                           4     3      1      89
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clcd_print
     _clcd_write
   _init_clcd
     _init_display_controller
       _clcd_write

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80     20      37     46.2%
BITBANK0            80      0       0      0.0%
COMMON              14     11      11     78.6%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      48      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Dec 25 20:14:57 2024

                              pc 0002                   clcd_print@addr 0076                               l33 0729  
                             l36 07ED                               l45 06F3                               l39 06A0  
                             u70 06FC                               u71 06F8                               u84 06FF  
                             u95 070F                               fsr 0004                              l701 07B6  
                            l711 07E1                              l703 07B9                              l713 07E8  
                            l705 07C0                              l721 069B                              l723 06C5  
                            l707 07CC                              l715 0696                              l731 072A  
                            l725 06CD                              l709 07D1                              l717 0699  
                            l733 072F                              l671 06F5                              l727 06DD  
                            l719 069A                              l751 077C                              l743 0757  
                            l735 0744                              l681 070B                              l673 06FF  
                            l729 06E3                              l745 0765                              l737 074F  
                            l683 0717                              l675 0702                              l691 078B  
                            l747 076B                              l739 0753                              l685 0718  
                            l677 0703                              l693 0793                              l749 0778  
                            l687 071D                              l679 0708                              l695 079A  
                            l689 0720                              l697 07AA                              l699 07AF  
                            _RE1 0049                              u100 06F3                              _RE2 004A  
                            u101 06F2                              u110 0735                              u120 0778  
                            u121 0777                              u125 0774                              u207 0705  
                            u217 071A                              u137 078F                              u227 0724  
                            u147 079E                              u157 07AC                              u167 07C2  
                            u177 07CE                              u187 07DC                              u197 07EA  
                            fsr0 0004                              indf 0000                             STR_1 0013  
                           _main 072A                             btemp 007E                             start 0000  
                 clcd_write@byte 0073                   clcd_write@mode 0070                            ?_main 0070  
                          _PORTD 0008                            _TRISD 0088                            main@i 0032  
                          pclath 000A                            status 0003                            wtemp0 007E  
                __initialization 07EE                     __end_of_main 078B                           ??_main 0077  
                         _TRISE1 0449                           _TRISE2 044A          _init_display_controller 078B  
        __end_of__initialization 07FC                   __pcstackCOMMON 0070                     __pidataBANK0 06A1  
      ??_init_display_controller 0074                       _clcd_print 06C5                       _clcd_write 06F4  
                     __pmaintext 072A                       __stringtab 0003                          __ptext1 0696  
                        __ptext2 078B                          __ptext3 06C5                          __ptext4 06F4  
__end_of_init_display_controller 07EE                __end_of_init_clcd 06A1                          main@msg 0020  
           end_of_initialization 07FC                      ?_clcd_print 0074                      ?_clcd_write 0070  
                  clcd_print@str 0074              start_initialization 07EE                       init_fetch0 06B2  
                    __pdataBANK0 0034                        ___latbits 0002                    __pcstackBANK0 0020  
                      __pstrings 0003                        _init_clcd 0696         ?_init_display_controller 0070  
                   ??_clcd_print 0077                     ??_clcd_write 0071                      __stringbase 0012  
             __end_of_clcd_print 06F4               __end_of_clcd_write 072A                       ?_init_clcd 0070  
             __end_of__stringtab 0013                         main@F989 0034                         main@temp 0031  
                       init_ram0 06B6                      ??_init_clcd 0076                        stringcode 000D  
                       stringdir 000D                         stringtab 0003  
